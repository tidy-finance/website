---
title: Discounted Cash Flow Analysis
metadata:
  pagetitle: DCF with Python
  description-meta: Learn how to use the programming language Python to value companies using discounted cash flow analysis.
---

```{python}
#| echo: false
exec(open("./render-settings.py").read())
```

::: {.callout-note}
You are reading **Tidy Finance with Python**. You can find the equivalent chapter for the sibling **Tidy Finance with R** [here](../r/discounted-cash-flow-analysis.qmd).
:::

In this chapter, we address a fundamental question: What is the value of a company? Company valuation is a critical tool that helps us determine the economic value of a business. Understanding a company's value is essential, whether it is for investment decisions, mergers and acquisitions, or financial reporting. Valuation is not just about assigning a number, as it is also a framework for making informed decisions. For example, investors use valuation to identify whether a stock is under- or overvalued, and companies rely on valuation for strategic decisions, like pricing an acquisition or preparing for an IPO.

Company valuation methods broadly fall into three categories:\index{Valuation methods}

- Market-based approaches compare companies using relative metrics like Price-to-Earnings ratios.
- Asset-based methods focus on the net value of a company's tangible and intangible assets.
- Income-based techniques value companies based on their ability to generate future cash flows.

We focus on Discounted Cash Flow (DCF) analysis, an income-based approach, because it captures three crucial aspects of valuation:\index{Discounted Cash Flow}\index{DCF} First, DCF explicitly accounts for the time value of money - the principle that a dollar today is worth more than a dollar in the future. By discounting future cash flows to present value with the appropriate discount rate, we incorporate both time preferences and risk.\index{Time value of money} Second, DCF is inherently forward-looking, making it particularly suitable for companies where historical performance may not reflect future potential. This characteristic is especially relevant when valuing growth companies or analyzing new business opportunities. Third, DCF analysis is flexible enough to accommodate various business models and capital structures, making it applicable across different industries and company sizes.

In our exposition of the DCF valuation framework, we focus on its three key components:\index{DCF structure}

- Free Cash Flow (FCF) forecasts represent the expected future cash available for distribution to investors after accounting for operating expenses, taxes, and investments.\index{Free Cash Flow}
- Terminal value captures the company's value beyond the explicit forecast period, often representing a significant portion of the total valuation.\index{Terminal value}
- Discount rate, typically the Weighted Average Cost of Capital (WACC), adjusts future cash flows to present value by incorporating risk and capital structure considerations.\index{WACC}

We make a few simplifying assumptions due to the diverse nature of businesses, which a simple model cannot cover. After all, there are entire textbooks written just on valuation. In particular, we assume that firms only conduct operating activities (i.e., financial statements do not include non-operating items), implying that firms do not own any assets that do not produce operating cash flows. Otherwise, you must value these non-operating activities separately for many real-world examples. 

In this chapter, we rely on the following packages to build a simple DCF analysis:

```{python}
import pandas as pd
import numpy as np
import statsmodels.formula.api as smf

from fmpapi import fmp_get
from plotnine import *
from mizani.formatters import percent_format, comma_format
```

::: {.callout-tip}
The `fmpapi` package is developed by Christoph Scheuch and is not sponsored by or affiliated with FMP. However, you can get 15% off your FMP subscription by using this [affiliate link](https://site.financialmodelingprep.com/pricing-plans?couponCode=tidyfinance). By signing up through this link, you also support the development of this package at no extra cost to you.
:::

## Prepare Data

Before we can perform a DCF analysis, we need historical financial data to inform our forecasts. We use the Financial Modeling Prep (FMP) API to download financial statements. The `fmpapi` package provides a convenient interface for accessing this data in a tidy format.\index{Data!FMP API}

```{python}
symbol = "MSFT"

income_statements = fmp_get(
  "income-statement", symbol, {"period": "annual", "limit": 5}, to_pandas = True
)
cash_flow_statements = fmp_get(
  "cash-flow-statement", symbol, {"period": "annual", "limit": 5}, to_pandas = True
)
```

Our analysis centers on Free Cash Flow (FCF), which represents the cash available to all investors after the company has covered its operational needs and capital investments.\index{Free Cash Flow} We calculate FCF using the following formula:

$$\text{FCF} = \text{EBIT} + \text{Depreciation \& Amortization} - \text{Taxes} + \Delta \text{Working Capital} - \text{CAPEX}$$

Each component of this formula serves a specific purpose in capturing the company's cash-generating ability:\index{Free Cash Flow components}

- EBIT (Earnings Before Interest and Taxes) measures core operating profit
- Depreciation & Amortization accounts for non-cash expenses
- Taxes reflect actual cash payments to tax authorities
- Changes in Working Capital capture cash tied up in operations
- Capital Expenditures (CAPEX) represent investments in long-term assets

We can implement this calculation by combining and transforming our financial statement data. Note that we also arrange by year, which is important for some of the following code chunks.

```{python}
dcf_data = (income_statements
  .assign(
    ebit=lambda x: x["net_income"] + x["income_tax_expense"] + x["interest_expense"] - x["interest_income"]
  )
  .get(["calendar_year", "ebit", "revenue", "depreciation_and_amortization", "income_tax_expense"])
  .rename(columns={
      "calendar_year": "year",
      "income_tax_expense": "taxes"
  })
  .merge(
    (cash_flow_statements
      .get(["calendar_year", "change_in_working_capital", "capital_expenditure"])
      .rename(columns={
        "calendar_year": "year",
        "change_in_working_capital": "delta_working_capital",
        "capital_expenditure": "capex"
      })
    ), on="year", how="left"
  )
  .assign(
    fcf=lambda x: x["ebit"] + x["depreciation_and_amortization"] - x["taxes"] + x["delta_working_capital"] - x["capex"]
  )
  .sort_values("year")
)
```

## Forecasting Free Cash Flow

After calculating historical FCF, we need to project it into the future. While historical data provides a foundation, forecasting requires both quantitative analysis and qualitative judgment. We use a ratio-based approach that links all FCF components to revenue growth, making our forecasts more tractable.\index{Free Cash Flow!Forecasting} This is another crucial assumption for our exposition that will not hold in reality. Thus, you must put more thought into these forecast ratios and their dynamics over time.

First, we express each FCF component as a ratio relative to revenue. This standardization helps identify trends and makes forecasting more systematic. @fig-500 shows the historical evolution of these key financial ratios.

```{python}
#| label: fig-500
#| fig-cap: "Ratios are based on financial statements provided through the FMP API." 
#| fig-alt: "Title: Key forecast ratios of Microsoft between 2020 and 2024. The figure shows a line chart with years on the horizontal axis and financial ratios on the vertical axis."
dcf_data = (dcf_data
  .assign(
    revenue_growth=lambda x: x["revenue"] / x["revenue"].shift(1) - 1,
    operating_margin=lambda x: x["ebit"] / x["revenue"],
    da_margin=lambda x: x["depreciation_and_amortization"] / x["revenue"],
    taxes_to_revenue=lambda x: x["taxes"] / x["revenue"],
    delta_working_capital_to_revenue=lambda x: x["delta_working_capital"] / x["revenue"],
    capex_to_revenue=lambda x: x["capex"] / x["revenue"]
  )
)

dcf_data_long = (dcf_data
  .melt(
    id_vars="year",
    value_vars=[
      "operating_margin", "da_margin", "taxes_to_revenue",
      "delta_working_capital_to_revenue", "capex_to_revenue"
    ],
    var_name="name",
    value_name="value"
  )
)

financial_ratios_figure = (
  ggplot(
    dcf_data_long,
    aes(x="year", y="value", color="name")
  )
  + geom_line()
  + scale_y_continuous(labels=percent_format())
  + labs(
      x="", y="", color="",
      title="Key financial ratios of Microsoft between 2020 and 2024"
    )
)
financial_ratios_figure.draw
```

The operating margin, for instance, represents how much of each revenue dollar translates into operating profit (EBIT), while the CAPEX-to-revenue ratio indicates the company's investment intensity.\index{Financial ratios}

For our DCF analysis, we need to project these ratios into the future. These projections should reflect both historical patterns and forward-looking considerations such as: Industry trends and competitive dynamics, company-specific growth initiatives, expected operational efficiency improvements, planned capital investments, or working capital management strategies. Overall, there is a lot to consider in practice. However, forecast ratios make this process tractable.

Another crucial question is the length of the forecast period. We use five years below ad-hoc, but you want to make detailed projections for each year when the company undergoes significant changes. As long as forecast ratios change, you need to make explicit forecasts. Once the company reaches a steady state, you can switch to computing the continuation value discussed later.

We demonstrate this forecasting approach in @fig-501. Note that our forecast ratio dynamics just serve as an example and are not grounded in deeper economic analysis.

```{python}
#| label: fig-501
#| fig-cap: "Historical ratios are based on financial statements provided through the FMP API, while forecasts are manually defined." 
#| fig-alt: "Title: Key forecast ratios and ad-hoc forecasts of Microsoft between 2020 and 2029. The figure shows a line chart with years on the horizontal axis and financial ratios and their projections on the vertical axis."
forecast_ratios = pd.DataFrame({
    "year": [2025, 2026, 2027, 2028, 2029],
    "operating_margin": [0.41, 0.42, 0.43, 0.44, 0.45],
    "da_margin": [0.09, 0.09, 0.09, 0.09, 0.09],
    "taxes_to_revenue": [0.08, 0.07, 0.06, 0.06, 0.06],
    "delta_working_capital_to_revenue": [0.001, 0.001, 0.001, 0.001, 0.001],
    "capex_to_revenue": [-0.2, -0.22, -0.2, -0.18, -0.16]
})
forecast_ratios["type"] = "Forecast"

dcf_data["type"] = "Realized"
dcf_data = pd.concat([dcf_data, forecast_ratios], ignore_index=True)

dcf_data_long = (dcf_data
  .melt(
    id_vars=["year", "type"],
    value_vars=[
      "operating_margin", "da_margin", "taxes_to_revenue",
      "delta_working_capital_to_revenue", "capex_to_revenue"
    ],
    var_name="name",
    value_name="value"
  )
)

dcf_data_long["type"] = pd.Categorical(
  dcf_data_long["type"], categories=["Realized", "Forecast"]
)

forecast_ratios_figure = (
  ggplot(
    dcf_data_long,
    aes(x="year", y="value", color="name", linetype="type")
  )
  + geom_line()
  + scale_x_continuous(breaks=range(2020, 2029))
  + scale_y_continuous(labels=percent_format())
  + labs(
      x="", y="", color="", linetype="",
      title="Key financial ratios and ad-hoc forecasts of Microsoft between 2020 and 2029"
    )
)
forecast_ratios_figure.draw
```

The final step in our FCF forecast is projecting revenue growth. While there are multiple approaches to this task, we demonstrate a GDP-based method that links company growth to macroeconomic forecasts.\index{Revenue growth}

We use GDP growth forecasts from the [IMF World Economic Outlook (WEO)](https://www.imf.org/en/Publications/WEO/weo-database/2024/October/weo-report?c=111,&s=NGDP_RPCH,&sy=2020&ey=2029&ssm=0&scsm=1&scc=0&ssd=1&ssc=0&sic=1&sort=country&ds=.&br=1) database as our baseline. The WEO provides comprehensive economic projections, though it is important to note that these forecasts are periodically revised as new data becomes available.\index{Data!IMF WEO} We manually collect these forecasts and store them in a tibble.

```{python}
gdp_growth = pd.DataFrame({
  "year": list(range(2020, 2030)),
  "gdp_growth": [
    -0.02163, 0.06055, 0.02512, 0.02887, 0.02765, 
    0.02153, 0.02028, 0.02120, 0.02122, 0.02122
  ]
})

dcf_data = (dcf_data
  .merge(gdp_growth, on="year", how="left")
)
```

Our approach models revenue growth as a linear function of GDP growth. This relation captures the intuition that company revenues often move in tandem with broader economic activity, though usually with different sensitivity.\index{Growth modeling} Let us estimate the model with historical data.

```{python}
revenue_growth_model = smf.ols("revenue_growth ~ gdp_growth", data=dcf_data).fit().params

dcf_data = (dcf_data
  .assign(
    revenue_growth_modeled=lambda x: (
      revenue_growth_model["Intercept"] + revenue_growth_model["gdp_growth"] * x["gdp_growth"]
    ),
    revenue_growth=lambda x: (
      np.where(x["type"] == "Forecast", x["revenue_growth_modeled"], x["revenue_growth"])
    )
  )
)
```

The model estimates two parameters: (i) an intercept that captures the company's baseline growth, and (ii) a slope coefficient that measures the company's sensitivity to GDP changes. Then, we can use the model and the growth forecasts to make revenue growth projections. We visualize the historical and projected growth rates using this approach in @fig-502:

```{python}
#| label: fig-502
#| fig-cap: "Realized revenue growth rates are based on financial statements provided through the FMP API, while forecasts are modeled unsing IMF WEO forecasts." 
#| fig-alt: "Title: GDP growth and Microsoft's revenue growth and modeled forecasts between 2020 and 2029. The figure shows a line chart with years on the horizontal axis and GDP growth, revenue growth, and their projections on the vertical axis."
revenue_growth = (dcf_data
  .query("year >= 2021")
  .melt(
    id_vars=["year", "type"],
    value_vars=["revenue_growth", "gdp_growth"], 
    var_name="name",
    value_name="value"
  )
)

revenue_growth_figure = (
  ggplot(
    revenue_growth,
    aes(x="year", y="value", color="name", linetype="type")
  )
  + geom_line()
  + scale_x_continuous(breaks=range(2020, 2029))
  + scale_y_continuous(labels=percent_format())
  + labs(
      x="", y="", color="", linetype="",
      title="GDP growth and Microsoft's revenue growth and modeled forecasts between 2020 and 2029"
   )
)
revenue_growth_figure.draw
```

While more sophisticated approaches exist (e.g., proprietary analyst forecasts or bottom-up market analyses), this method provides a transparent and data-driven starting point for revenue projections.\index{Forecasting methods}

With all components in place - revenue growth projections and forecast ratios - we can now calculate our FCF forecasts. We must first convert our growth rates into revenue projections and then apply our forecast ratios to compute each FCF component.\index{Free Cash Flow!Computation}

```{python}
dcf_data.loc[0, "revenue_growth"] = 0
dcf_data["revenue"] = dcf_data["revenue"].iloc[0] * (1 + dcf_data["revenue_growth"]).cumprod()

dcf_data = (dcf_data
  .assign(
    ebit=lambda x: x["operating_margin"] * x["revenue"],
    depreciation_and_amortization=lambda x: x["da_margin"] * x["revenue"],
    taxes=lambda x: x["taxes_to_revenue"] * x["revenue"],
    delta_working_capital=lambda x: x["delta_working_capital_to_revenue"] * x["revenue"],
    capex=lambda x: x["capex_to_revenue"] * x["revenue"],
    fcf=lambda x: x["ebit"] + x["depreciation_and_amortization"] - x["taxes"] + x["delta_working_capital"] - x["capex"]
  )
)
```

We visualize the resulting FCF projections in @fig-503.

```{python}
#| label: fig-503
#| fig-cap: "Realized growth rates are based on financial statements provided through the FMP API, while forecasts are manually defined." 
#| fig-alt: "Title: Actual and predicted free cash flow for Microsoft from 2020 to 2029. The figure shows a bar chart with years on the horizontal axis and Microsoft's historical and projected free cash flows on the vertical axis."
free_cash_flow_figure = (
  ggplot(
    dcf_data,
    aes(x="year", y="fcf / 1e9", fill="type")
  )
  + geom_col()
  + scale_x_continuous(breaks=range(2020, 2029))
  + labs(
      x="", y="Free Cash Flow (in B USD)", fill="",
      title="Actual and predicted free cash flow for Microsoft from 2020 to 2029"
    )
)
free_cash_flow_figure.draw
```

## Continuation Value

A key component of DCF analysis is the continuation value (or terminal value), representing the company's value beyond the explicit forecast period. This value often constitutes the majority of the total valuation, making its estimation particularly important.\index{Continuation value} You can compute the continuation value once the company has reached its steady state.

The most common approach is the Perpetuity Growth Model (or Gordon Growth Model), which assumes FCF grows at a constant rate indefinitely.\index{Perpetuity Growth Model}\index{Gordon Growth Model} The formula for this model is:

$$TV_{T} = \frac{FCF_{T+1}}{r - g},$$

where $TV_{T}$ is the terminal value at time $T$, $FCF_{T+1}$ is the free cash flow in the first year after our forecast period, $r$ is the discount rate (typically WACC, see below), and $g$ is the perpetual growth rate. A common mistake is to ignore the time shift in the model. You must compute $FCF_{T+1}$, which is equal to $FCF_{T}\cdot(1+g)$

The perpetual growth rate $g$ should reflect the long-term economic growth potential. A common benchmark is the long-term GDP growth rate, as few companies can sustainably grow faster than the overall economy indefinitely.\index{Growth rate!Perpetual} Exceeding GDP growth indefinitely also implies that the whole economy eventually consists of one company. For example, the last 20 years of GDP growth is a sensible assumption (the nominal growth rate is 4% for the US).

Let us implement the Perpetuity Growth Model:

```{python}
def compute_terminal_value(last_fcf, growth_rate, discount_rate):
    return last_fcf * (1 + growth_rate) / (discount_rate - growth_rate)

last_fcf = dcf_data['fcf'].iloc[-1]
terminal_value = compute_terminal_value(
  last_fcf, growth_rate=0.04, discount_rate=0.08
)

print(np.round(terminal_value / 1e9))
```

Note that while we use the Perpetuity Growth Model here, practitioners often cross-check their estimates with alternative methods like the exit multiple approach, which bases the terminal value on comparable company valuations.^[See (corporatefinanceinstitute.com/)[https://corporatefinanceinstitute.com/resources/valuation/exit-multiple/)] for an intuitive explanation of the exit multiple approach.]
\index{Valuation methods!Exit multiple}

## Discount Rate

The final component of our DCF analysis involves discounting future cash flows to present value. We typically use the Weighted Average Cost of Capital (WACC) as the discount rate, representing the blended cost of financing for all company stakeholders.\index{WACC} The WACC is the correct rate to discount cash flows distributed to both debt and equity holders, which is the case in our model as we use free cash flows.

The WACC formula combines the costs of equity and debt financing:

$$WACC = \frac{E}{D+E} \cdot r^E + \frac{D}{D+E} \cdot r^D \cdot (1 - \tau),$$

where $E$ is the market value of the company's equity with required return $r^E$, $D$ is the market value of the company's debt with pre-tax return $r^D$, and $\tau$ is the tax rate.

While you can often find estimates of WACC from financial databases or analysts' reports, you may need to calculate it yourself. Let us walk through the practical steps to estimate WACC using real-world data: 

- $E$ is typically measured as the market value of the company's equity. One common approach is to use market capitalization from the stock exchange.
- $D$ is often measured using the book value of the company's debt. While this might not perfectly reflect market conditions, it is a practical starting point when market data is unavailable. Moreover, it is close to correct without default.
- The Capital Asset Pricing Model (CAPM) is a popular method to estimate the cost of equity $r^E$. It considers the risk-free rate, the equity risk premium, and the company's risk exposure (i.e., beta). For a detailed guide estimating the CAPM, we refer to Chapter [Capital Asset Pricing Model](capital-asset-pricing-model.qmd).
- The return on debt $r^D$ can also be estimated in different ways. For instance, effective interest rates can be calculated as the ratio of interest expense to total debt from financial statements. This gives you a real-world measure of what the company is currently paying. Alternatively, you can look up corporate bond spreads for companies in the same rating group. 

If you would rather not estimate WACC manually, resources are available to help you find industry-specific discount rates. One of the most widely used sources is Aswath Damodaran’s [database](https://pages.stern.nyu.edu/~adamodar/New_Home_Page/datacurrent.html). He maintains an extensive database that provides a wealth of financial data, including estimated discount rates, cash flows, growth rates, multiples, and more. For example, if you are analyzing a company in the Computer Services sector, as we do here, you can look up the industry's average WACC and use it as a benchmark for your analysis. The following code chunk downloads the WACC data and extracts the value for this industry:

```{python}
import requests

url = "https://pages.stern.nyu.edu/~adamodar/pc/datasets/wacc.xls"
response = requests.get(url)

with open("wacc.xls", "wb") as file:
    file.write(response.content)
    
wacc_raw = pd.read_excel("wacc.xls", sheet_name=1, skiprows=18)

import os
os.remove("wacc.xls")

wacc = wacc_raw.loc[
  wacc_raw["Industry Name"] == "Computer Services", "Cost of Capital"
].values[0]
```

::: {.callout-tip}
You need the `xlrd` package to use `pd.read_excel()`, so make sure to install it via, e.g., `pip install xlrd`
:::

## Computing Enterprise Value

Having established all components, we can now compute the total company value (given that there are no non-operating activities). The enterprise value combines two elements:\index{DCF!Computation}\index{DCF!Enterprise value}

- The present value of cash flows during the explicit forecast period and
- The present value of the continuation (or terminal) value.

This is expressed mathematically as:

$$
\text{Total DCF Value} = \sum_{t=1}^{T} \frac{\text{FCF}t}{(1 + \text{WACC})^t} + \frac{\text{TV}_{T}}{(1 + \text{WACC})^T},
$$

where $T$ is the length of our forecast period. Let us implement this calculation in a simple function that takes the WACC and growth rate as input. Then, we present an example at the values discussed above.

```{python}
def compute_dcf(wacc, growth_rate):
    free_cash_flow = dcf_data["fcf"].values
    last_fcf = free_cash_flow[-1]
    terminal_value = compute_terminal_value(last_fcf, growth_rate, wacc)
    
    years = len(free_cash_flow)
    present_value_fcf = free_cash_flow / ((1 + wacc) ** np.arange(1, years + 1))
    present_value_tv = terminal_value / ((1 + wacc) ** years)
    
    return present_value_fcf.sum() + present_value_tv

dcf_value = compute_dcf(wacc, 0.04)

print(np.round(dcf_value / 1e9))
```

Note that this valuation represents an enterprise value - the total value of the company's operations. To arrive at the equity value, we need to subtract net debt (total debt minus cash and equivalents).\index{Enterprise value}\index{DCF!Equity value}

## Sensitvity Analysis

DCF valuation is only as robust as its underlying assumptions. Given the inherent uncertainty in forecasting, it is crucial to understand how changes in key inputs affect our valuation.\index{Sensitivity analysis}

While we could examine sensitivity to various inputs like operating margins or capital expenditure ratios, we focus on two critical drivers for our exposition:

- The perpetual growth rate, which determines long-term value creation and
- The WACC, which affects how we value future cash flows.

Let us implement a sensitivity analysis that varies these two parameters:

```{python}
#| label: fig-504
#| fig-cap: "The enterprise values combine data from FMP API, ad-hoc forecasts of financial ratios, and IMF WEO growth forecasts." 
#| fig-alt: "Title: Enterprise value of Microsoft for different WACC and growth rate scenarios. The figure shows a tile chart with different WACC values on the horizontal axis and perpetual growth rates on the vertical axis. Each tile shows a corresponding DCF value, illustrating the sensitivity of the DCF analysis to assumptions."
import itertools

wacc_range = np.arange(0.06, 0.08 + 0.01, 0.01)
growth_rate_range = np.arange(0.02, 0.04 + 0.01, 0.01)

sensitivity = pd.DataFrame(
  itertools.product(wacc_range, growth_rate_range),
  columns=["wacc", "growth_rate"]
)

sensitivity["value"] = (sensitivity
  .apply(
    lambda x: np.round(compute_dcf(x["wacc"], x["growth_rate"]) / 1e9, 0), axis=1
  )
)

sensitivity_figure = (
  ggplot(
    sensitivity,
    aes(x="wacc", y="growth_rate", fill="value", label="value")
  )
  + geom_tile()
  + geom_text(color="white")
  + scale_x_continuous(labels=percent_format()) 
  + scale_y_continuous(labels=percent_format())
  + scale_fill_continuous(labels=comma_format())
  + labs(
      x="WACC", y="Perpetual growth rate", fill="Enterprise value",
      title="Enterprise value of Microsoft for different WACC and growth rate scenarios",
    )
)
sensitivity_figure.draw
```

@fig-504 reveals several key insights about our valuation:\index{Visualization!Sensitivity}\index{Visualization!Tile chart} The valuation is highly sensitive to both WACC and growth assumptions, as small changes in either parameter can lead to substantial changes in enterprise value. Moreover, the relation between these parameters and company value is non-linear as the impact of growth rate changes becomes more pronounced at lower WACCs.

## From Enterprise to Equity Value

As we have discussed, our DCF analysis yields the value of the company's operations. We have assumed that there are no non-operating assets. Now, we explicitly consider their existence and show you how to compute the equity value belonging to shareholders.

Non-operating assets are not essential to operations but could, in some cases, generate income (e.g., marketable securities, vacant land, idle equipment). If they exist, you must restate the financial statements to exclude the impact of these non-operating assets. With their effects removed, you can conduct the DCF analysis presented above. Afterwards, you value these non-operating assets and add them to the DCF value to arrive at the company's enterprise value.

Second, we want to discuss equity value. As you saw in the computation of the WACC, free cash flows go to both debt and equity holders. Hence, we must consider the share of the enterprise value that goes to debt. In theory, the value of debt is the market value of total debt, but in practice, typically book debt. This value has to be subtracted from enterprise value.

Combining these adjustments, we can compute the equity value that belongs to shareholders as:\index{Equity value}

$$\text{Equity Value} = \text{DCF Value} + \text{Non-Operating Assets} - \text{Value of Debt}$$

We leave it as an exercise to calculate the equity value using the DCF value from above. 

## Key takeaways

Discounted Cash Flow analysis provides a structured approach to company valuation. In this chapter, you learned to:

- Calculate free cash flow using financial statement data and ratio analysis.
- Project future cash flows by combining company-specific metrics with macroeconomic forecasts.
- Estimate terminal value using the perpetuity growth method.
- Apply appropriate discount rates based on industry benchmarks.
- Test the sensitivity of valuations to key assumptions.
- Convert enterprise values to equity values using balance sheet adjustments.

## Exercises

1. Download financial statements for another company of your choice and compute its historical Free Cash Flow. Compare the results with the Microsoft example from this chapter.
1. Create a function that automatically generates FCF forecasts using different sets of ratio assumptions. Use it to create alternative scenarios for Microsoft.
1. Implement an exit multiple approach for terminal value calculation and compare the results with the perpetuity growth method.
1. Extend the sensitivity analysis to include operating margin assumptions. Create a visualization showing how changes in margins affect the final valuation.
1. Calculate Microsoft's equity value by adjusting the CDF value as described above. 
