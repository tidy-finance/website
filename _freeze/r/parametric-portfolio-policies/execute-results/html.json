{
  "hash": "23532d9f04d78d491ae477b890fb80b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Parametric Portfolio Policies\naliases:\n  - ../parametric-portfolio-policies.html\nmetadata:\n  pagetitle: Parametric Portfolio Policies with R\n  description-meta: Evaluate portfolio allocation strategies based on Brandt, Santa-Clara, and Valkanov (2009) using the programming language R.\n---\n\n::: callout-note\nYou are reading **Tidy Finance with R**. You can find the equivalent chapter for the sibling **Tidy Finance with Python** [here](../python/parametric-portfolio-policies.qmd).\n:::\n\nIn this chapter, we apply different portfolio performance measures to evaluate and compare portfolio allocation strategies. \nFor this purpose, we introduce a direct way to estimate optimal portfolio weights for large-scale cross-sectional applications. More precisely, the approach of @Brandt2009 proposes to parametrize the optimal portfolio weights as a function of stock characteristics instead of estimating the stock's expected return, variance, and covariances with other stocks in a prior step. \nWe choose weights as a function of the characteristics, which maximize the expected utility of the investor. This approach is feasible for large portfolio dimensions (such as the entire CRSP universe) and has been proposed by @Brandt2009. See the review paper by @Brandt2010 for an excellent treatment of related portfolio choice methods.  \n\nThe current chapter relies on the following set of R packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(RSQLite)\n```\n:::\n\n\n## Data Preparation\n\nTo get started, we load the monthly CRSP file, which forms our investment universe. We load the data from our `SQLite`-database introduced in [Accessing and Managing Financial Data](accessing-and-managing-financial-data.qmd) and [WRDS, CRSP, and Compustat](wrds-crsp-and-compustat.qmd).\\index{Data!CRSP}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_finance <- dbConnect(\n  SQLite(), \"data/tidy_finance_r.sqlite\",\n  extended_types = TRUE\n)\n\ncrsp_monthly <- tbl(tidy_finance, \"crsp_monthly\") |>\n  select(permno, date, ret_excess, mktcap, mktcap_lag) |>\n  collect()\n```\n:::\n\n\nTo evaluate the performance of portfolios, we further use monthly market returns as a benchmark to compute CAPM alphas.\\index{Data!Fama-French factors} \n\n::: {.cell}\n\n```{.r .cell-code}\nfactors_ff3_monthly <- tbl(tidy_finance, \"factors_ff3_monthly\") |>\n  select(date, mkt_excess) |>\n  collect()\n```\n:::\n\n\nNext, we retrieve some stock characteristics that have been shown to have an effect on the expected returns or expected variances (or even higher moments) of the return distribution. \\index{Momentum} In particular, we record the lagged one-year return momentum (`momentum_lag`), defined as the compounded return between months $t-13$ and $t-2$ for each firm, which we calculate using market capitalization for simplicity. In finance, momentum is the empirically observed tendency for rising asset prices to rise further, and falling prices to keep falling [@Jegadeesh1993]. We refer to the exercise for a more elaborate measure of momentum. \\index{Size!Size effect} The second characteristic is the firm's market equity (`size_lag`), defined as the log of the price per share times the number of shares outstanding [@Banz1981]. To construct the correct lagged values, we use the approach introduced in [WRDS, CRSP, and Compustat](wrds-crsp-and-compustat.qmd).\\index{Data!CRSP}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrsp_monthly_lags <- crsp_monthly |>\n  transmute(permno,\n    date_13 = date %m+% months(13),\n    mktcap\n  )\n\ncrsp_monthly <- crsp_monthly |>\n  inner_join(crsp_monthly_lags,\n    join_by(permno, date == date_13),\n    suffix = c(\"\", \"_13\")\n  )\n\ndata_portfolios <- crsp_monthly |>\n  mutate(\n    momentum_lag = mktcap_lag / mktcap_13,\n    size_lag = log(mktcap_lag)\n  ) |>\n  drop_na(contains(\"lag\"))\n```\n:::\n\n\n## Parametric Portfolio Policies\n\nThe basic idea of parametric portfolio weights is as follows. Suppose that at each date $t$ we have $N_t$ stocks in the investment universe, where each stock $i$ has a return of $r_{i, t+1}$ and is associated with a vector of firm characteristics $x_{i, t}$ such as time-series momentum or the market capitalization. The investor's problem is to choose portfolio weights $w_{i,t}$ to maximize the expected utility of the portfolio return:\n$$\\begin{aligned}\n\\max_{\\omega} E_t\\left(u(r_{p, t+1})\\right) = E_t\\left[u\\left(\\sum\\limits_{i=1}^{N_t}\\omega_{i,t}r_{i,t+1}\\right)\\right]\n\\end{aligned}$$\nwhere $u(\\cdot)$ denotes the utility function.\n\nWhere do the stock characteristics show up? We parameterize the optimal portfolio weights as a function of the stock characteristic $x_{i,t}$ with the following linear specification for the portfolio weights: \n$$\\omega_{i,t} = \\bar{\\omega}_{i,t} + \\frac{1}{N_t}\\theta'\\hat{x}_{i,t},$$\nwhere $\\bar{\\omega}_{i,t}$ is a stock's weight in a benchmark portfolio (we use the value-weighted or naive portfolio in the application below), $\\theta$ is a vector of coefficients which we are going to estimate, and $\\hat{x}_{i,t}$ are the characteristics of stock $i$, cross-sectionally standardized to have zero mean and unit standard deviation. \n\nIntuitively, the portfolio strategy is a form of active portfolio management relative to a performance benchmark. Deviations from the benchmark portfolio are derived from the individual stock characteristics. Note that by construction the weights sum up to one as $\\sum_{i=1}^{N_t}\\hat{x}_{i,t} = 0$ due to the standardization. Moreover, the coefficients are constant across assets and over time. The implicit assumption is that the characteristics fully capture all aspects of the joint distribution of returns that are relevant for forming optimal portfolios.       \n\nWe first implement cross-sectional standardization for the entire CRSP universe. We also keep track of (lagged) relative market capitalization `relative_mktcap`, which will represent the value-weighted benchmark portfolio, while `n` denotes the number of traded assets $N_t$, which we use to construct the naive portfolio benchmark.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_portfolios <- data_portfolios |>\n  group_by(date) |>\n  mutate(\n    n = n(),\n    relative_mktcap = mktcap_lag / sum(mktcap_lag),\n    across(contains(\"lag\"), ~ (. - mean(.)) / sd(.)),\n  ) |>\n  ungroup() |>\n  select(-mktcap_lag)\n```\n:::\n\n\n## Computing Portfolio Weights\n\nNext, we move on to identify optimal choices of $\\theta$. We rewrite the optimization problem together with the weight parametrization and can then estimate $\\theta$ to maximize the objective function based on our sample \n$$\\begin{aligned}\nE_t\\left(u(r_{p, t+1})\\right) = \\frac{1}{T}\\sum\\limits_{t=0}^{T-1}u\\left(\\sum\\limits_{i=1}^{N_t}\\left(\\bar{\\omega}_{i,t} + \\frac{1}{N_t}\\theta'\\hat{x}_{i,t}\\right)r_{i,t+1}\\right).\n\\end{aligned}$$\nThe allocation strategy is straightforward because the number of parameters to estimate is small. Instead of a tedious specification of the $N_t$ dimensional vector of expected returns and the $N_t(N_t+1)/2$ free elements of the covariance matrix, all we need to focus on in our application is the vector $\\theta$. $\\theta$ contains only two elements in our application: the relative deviation from the benchmark due to *size* and *momentum*. \n\nTo get a feeling for the performance of such an allocation strategy, we start with an arbitrary initial vector $\\theta_0$. The next step is to choose $\\theta$ optimally to maximize the objective function. We automatically detect the number of parameters by counting the number of columns with lagged values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_parameters <- sum(str_detect(\n  colnames(data_portfolios), \"lag\"\n))\n\ntheta <- rep(1.5, n_parameters)\n\nnames(theta) <- colnames(data_portfolios)[str_detect(\n  colnames(data_portfolios), \"lag\"\n)]\n```\n:::\n\n\nThe function `compute_portfolio_weights()` below computes the portfolio weights $\\bar{\\omega}_{i,t} + \\frac{1}{N_t}\\theta'\\hat{x}_{i,t}$ according to our parametrization for a given value $\\theta_0$. Everything happens within a single pipeline. Hence, we provide a short walk-through.\n\nWe first compute `characteristic_tilt`, the tilting values $\\frac{1}{N_t}\\theta'\\hat{x}_{i, t}$ which resemble the deviation from the benchmark portfolio. Next, we compute the benchmark portfolio `weight_benchmark`, which can be any reasonable set of portfolio weights. In our case, we choose either the value or equal-weighted allocation. \n`weight_tilt` completes the picture and contains the final portfolio weights `weight_tilt = weight_benchmark + characteristic_tilt` which deviate from the benchmark portfolio depending on the stock characteristics.\n\nThe final few lines go a bit further and implement a simple version of a no-short sale constraint. While it is generally not straightforward to ensure portfolio weight constraints via parameterization, we simply normalize the portfolio weights such that they are enforced to be positive. Finally, we make sure that the normalized weights sum up to one again:\n$$\\omega_{i,t}^+ = \\frac{\\max(0, \\omega_{i,t})}{\\sum_{j=1}^{N_t}\\max(0, \\omega_{i,t})}.$$\n\n\nThe following function computes the optimal portfolio weights in the way just described.  \n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_portfolio_weights <- function(theta,\n                                      data,\n                                      value_weighting = TRUE,\n                                      allow_short_selling = TRUE) {\n  data |>\n    group_by(date) |>\n    bind_cols(\n      characteristic_tilt = data |>\n        transmute(across(contains(\"lag\"), ~ . / n)) |>\n        as.matrix() %*% theta |> as.numeric()\n    ) |>\n    mutate(\n      # Definition of benchmark weight\n      weight_benchmark = case_when(\n        value_weighting == TRUE ~ relative_mktcap,\n        value_weighting == FALSE ~ 1 / n\n      ),\n      # Parametric portfolio weights\n      weight_tilt = weight_benchmark + characteristic_tilt,\n      # Short-sell constraint\n      weight_tilt = case_when(\n        allow_short_selling == TRUE ~ weight_tilt,\n        allow_short_selling == FALSE ~ pmax(0, weight_tilt)\n      ),\n      # Weights sum up to 1\n      weight_tilt = weight_tilt / sum(weight_tilt)\n    ) |>\n    ungroup()\n}\n```\n:::\n\n\nIn the next step, we compute the portfolio weights for the arbitrary vector $\\theta_0$. In the example below, we use the value-weighted portfolio as a benchmark and allow negative portfolio weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweights_crsp <- compute_portfolio_weights(\n  theta,\n  data_portfolios,\n  value_weighting = TRUE,\n  allow_short_selling = TRUE\n)\n```\n:::\n\n\n## Portfolio Performance\n\n\\index{Performance evaluation}\nAre the computed weights optimal in any way? Most likely not, as we picked $\\theta_0$ arbitrarily. To evaluate the performance of an allocation strategy, one can think of many different approaches. In their original paper, @Brandt2009 focus on a simple evaluation of the hypothetical utility of an agent equipped with a power utility function $u_\\gamma(r) = \\frac{(1 + r)^{(1-\\gamma)}}{1-\\gamma}$, where $\\gamma$ is the risk aversion factor.\\index{Power utility}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower_utility <- function(r, gamma = 5) {\n  (1 + r)^(1 - gamma) / (1 - gamma)\n}\n```\n:::\n\n\nWe want to note that @Gehrig2020 warn that, in the leading case of constant relative risk aversion (CRRA), strong assumptions on the properties of the returns, the variables used to implement the parametric portfolio policy, and the parameter space are necessary to obtain a well-defined optimization problem.\n\nNo doubt, there are many other ways to evaluate a portfolio. The function below provides a summary of all kinds of interesting measures that can be considered relevant. Do we need all these evaluation measures? It depends: the original paper by @Brandt2009 only cares about the expected utility to choose $\\theta$. However, if you want to choose optimal values that achieve the highest performance while putting some constraints on your portfolio weights, it is helpful to have everything in one function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate_portfolio <- function(weights_crsp,\n                               capm_evaluation = TRUE,\n                               full_evaluation = TRUE,\n                               length_year = 12) {\n  \n  evaluation <- weights_crsp |>\n    group_by(date) |>\n    summarize(\n      tilt = weighted.mean(ret_excess, weight_tilt),\n      benchmark = weighted.mean(ret_excess, weight_benchmark)\n    ) |>\n    pivot_longer(\n      -date,\n      values_to = \"portfolio_return\",\n      names_to = \"model\"\n    ) \n  \n  evaluation_stats <- evaluation |>\n    group_by(model) |>\n    left_join(factors_ff3_monthly, join_by(date)) |>\n    summarize(tibble(\n      \"Expected utility\" = mean(power_utility(portfolio_return)),\n      \"Average return\" = 100 * mean(length_year * portfolio_return),\n      \"SD return\" = 100 * sqrt(length_year) * sd(portfolio_return),\n      \"Sharpe ratio\" = sqrt(length_year) * mean(portfolio_return) / sd(portfolio_return),\n\n    )) |>\n    mutate(model = str_remove(model, \"return_\")) \n  \n  if (capm_evaluation) {\n    evaluation_capm <- evaluation |> \n      left_join(factors_ff3_monthly, join_by(date)) |>\n      group_by(model) |>\n      summarize(\n      \"CAPM alpha\" = coefficients(lm(portfolio_return ~ mkt_excess))[1],\n      \"Market beta\" = coefficients(lm(portfolio_return ~ mkt_excess))[2]\n      )\n    \n    evaluation_stats <- evaluation_stats |> \n      left_join(evaluation_capm, join_by(model))\n  }\n\n  if (full_evaluation) {\n    evaluation_weights <- weights_crsp |>\n      select(date, contains(\"weight\")) |>\n      pivot_longer(-date, values_to = \"weight\", names_to = \"model\") |>\n      group_by(model, date) |>\n      mutate(\n        \"Absolute weight\" = abs(weight),\n        \"Max. weight\" = max(weight),\n        \"Min. weight\" = min(weight),\n        \"Avg. sum of negative weights\" = -sum(weight[weight < 0]),\n        \"Avg. fraction of negative weights\" = sum(weight < 0) / n(),\n        .keep = \"none\"\n      ) |>\n      group_by(model) |>\n      summarize(across(-date, ~ 100 * mean(.))) |>\n      mutate(model = str_remove(model, \"weight_\")) \n    \n    evaluation_stats <- evaluation_stats |> \n      left_join(evaluation_weights, join_by(model))\n  }\n  \n  evaluation_output <- evaluation_stats |> \n    pivot_longer(cols = -model, names_to = \"measure\") |> \n    pivot_wider(names_from = model)\n  \n  return(evaluation_output)\n}\n```\n:::\n\n\n\\index{Sharpe Ratio}\nLet us take a look at the different portfolio strategies and evaluation measures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate_portfolio(weights_crsp) |>\n  print(n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 3\n   measure                            benchmark     tilt\n   <chr>                                  <dbl>    <dbl>\n 1 Expected utility                  -0.250     -0.261  \n 2 Average return                     6.87       0.532  \n 3 SD return                         15.5       21.2    \n 4 Sharpe ratio                       0.444      0.0251 \n 5 CAPM alpha                         0.000105  -0.00489\n 6 Market beta                        0.994      0.944  \n 7 Absolute weight                    0.0249     0.0638 \n 8 Max. weight                        3.63       3.76   \n 9 Min. weight                        0.0000270 -0.144  \n10 Avg. sum of negative weights       0         78.1    \n11 Avg. fraction of negative weights  0         49.5    \n```\n\n\n:::\n:::\n\n\nThe value-weighted portfolio delivers an annualized return of more than 6 percent and clearly outperforms the tilted portfolio, irrespective of whether we evaluate expected utility, the Sharpe ratio, or the CAPM alpha. We can conclude the market beta is close to one for both strategies (naturally almost identically 1 for the value-weighted benchmark portfolio). When it comes to the distribution of the portfolio weights, we see that the benchmark portfolio weight takes less extreme positions (lower average absolute weights and lower maximum weight). By definition, the value-weighted benchmark does not take any negative positions, while the tilted portfolio also takes short positions.\n\n## Optimal Parameter Choice\n\nNext, we move to a choice of $\\theta$ that actually aims to improve some (or all) of the performance measures. We first define a helper function `compute_objective_function()`, which we then pass to an optimizer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_objective_function <- function(theta,\n                                       data,\n                                       objective_measure = \"Expected utility\",\n                                       value_weighting = TRUE,\n                                       allow_short_selling = TRUE) {\n  processed_data <- compute_portfolio_weights(\n    theta,\n    data,\n    value_weighting,\n    allow_short_selling\n  )\n\n  objective_function <- evaluate_portfolio(\n    processed_data,\n    capm_evaluation = FALSE,\n    full_evaluation = FALSE\n  ) |>\n    filter(measure == objective_measure) |>\n    pull(tilt)\n\n  return(-objective_function)\n}\n```\n:::\n\n\nYou may wonder why we return the negative value of the objective function. This is simply due to the common convention for optimization procedures to search for minima as a default. By minimizing the negative value of the objective function, we get the maximum value as a result.\nIn its most basic form, R optimization relies on the function `optim()`. As main inputs, the function requires an initial guess of the parameters and the objective function to minimize. Now, we are fully equipped to compute the optimal values of $\\hat\\theta$, which maximize the hypothetical expected utility of the investor. \n\n\n::: {.cell}\n\n```{.r .cell-code}\noptimal_theta <- optim(\n  par = theta,\n  fn = compute_objective_function,\n  objective_measure = \"Expected utility\",\n  data = data_portfolios,\n  value_weighting = TRUE,\n  allow_short_selling = TRUE,\n  method = \"Nelder-Mead\"\n)\n\noptimal_theta$par\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nmomentum_lag     size_lag \n       0.299       -1.703 \n```\n\n\n:::\n:::\n\n\nThe resulting values of $\\hat\\theta$ are easy to interpret: intuitively, expected utility increases by tilting weights from the value-weighted portfolio toward smaller stocks (negative coefficient for size) and toward past winners (positive value for momentum). Both findings are in line with the well-documented size effect [@Banz1981] and the momentum anomaly [@Jegadeesh1993].\n\n## More Model Specifications\n\nHow does the portfolio perform for different model specifications? For this purpose, we compute the performance of a number of different modeling choices based on the entire CRSP sample. The next code chunk performs all the heavy lifting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate_optimal_performance <- function(data, \n                                         objective_measure,\n                                         value_weighting, \n                                         allow_short_selling) {\n  optimal_theta <- optim(\n    par = theta,\n    fn = compute_objective_function,\n    data = data,\n    objective_measure = \"Expected utility\",\n    value_weighting = TRUE,\n    allow_short_selling = TRUE,\n    method = \"Nelder-Mead\"\n  )\n\n  processed_data = compute_portfolio_weights(\n    optimal_theta$par, \n    data,\n    value_weighting,\n    allow_short_selling\n  )\n  \n  portfolio_evaluation = evaluate_portfolio(\n    processed_data,\n    capm_evaluation = TRUE,\n    full_evaluation = TRUE\n  )\n \n  return(portfolio_evaluation) \n}\n\nspecifications <- expand_grid(\n  data = list(data_portfolios),\n  objective_measure = \"Expected utility\",\n  value_weighting = c(TRUE, FALSE),\n  allow_short_selling = c(TRUE, FALSE)\n) |> \n  mutate(\n    portfolio_evaluation = pmap(\n      .l = list(data, objective_measure, value_weighting, allow_short_selling),\n      .f = evaluate_optimal_performance\n    )\n)\n```\n:::\n\n\nFinally, we can compare the results. The table below shows summary statistics for all possible combinations: equal- or value-weighted benchmark portfolio, with or without short-selling constraints, and tilted toward maximizing expected utility. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nperformance_table <- specifications |>\n  select(\n    value_weighting,\n    allow_short_selling,\n    portfolio_evaluation\n  ) |>\n  unnest(portfolio_evaluation)\n\nperformance_table |>\n  rename(\n    \" \" = benchmark,\n    Optimal = tilt\n  ) |>\n  mutate(\n    value_weighting = case_when(\n      value_weighting == TRUE ~ \"VW\",\n      value_weighting == FALSE ~ \"EW\"\n    ),\n    allow_short_selling = case_when(\n      allow_short_selling == TRUE ~ \"\",\n      allow_short_selling == FALSE ~ \"(no s.)\"\n    )\n  ) |>\n  pivot_wider(\n    names_from = value_weighting:allow_short_selling,\n    values_from = \" \":Optimal,\n    names_glue = \"{value_weighting} {allow_short_selling} {.value} \"\n  ) |>\n  select(\n    measure,\n    `EW    `,\n    `VW    `,\n    sort(contains(\"Optimal\"))\n  ) |>\n  print(n = 11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 7\n   measure     `EW    ` `VW    ` `VW  Optimal ` `VW (no s.) Optimal `\n   <chr>          <dbl>    <dbl>          <dbl>                 <dbl>\n 1 Expected u… -0.251   -2.50e-1       -0.247                -0.248  \n 2 Average re… 10.0      6.87e+0       12.9                  12.1    \n 3 SD return   20.5      1.55e+1       19.5                  19.0    \n 4 Sharpe rat…  0.489    4.44e-1        0.660                 0.636  \n 5 CAPM alpha   0.00196  1.05e-4        0.00502               0.00422\n 6 Market beta  1.13     9.94e-1        1.01                  1.03   \n 7 Absolute w…  0.0249   2.49e-2        0.0345                0.0249 \n 8 Max. weight  0.0249   3.63e+0        3.48                  2.91   \n 9 Min. weight  0.0249   2.70e-5       -0.0280                0      \n10 Avg. sum o…  0        0             20.0                   0      \n11 Avg. fract…  0        0             36.8                   0      \n# ℹ 2 more variables: `EW  Optimal ` <dbl>,\n#   `EW (no s.) Optimal ` <dbl>\n```\n\n\n:::\n:::\n\n\nThe results indicate that the average annualized Sharpe ratio of the equal-weighted portfolio exceeds the Sharpe ratio of the value-weighted benchmark portfolio. Nevertheless, starting with the weighted value portfolio as a benchmark and tilting optimally with respect to momentum and small stocks yields the highest Sharpe ratio across all specifications. Finally, imposing no short-sale constraints does not improve the performance of the portfolios in our application.\n\n## Key Takeaways\n\n- Parametric portfolio policies estimate portfolio weights directly as functions of stock characteristics like momentum and size, avoiding the need to forecast expected returns or covariances.\n- This method, based on @Brandt2009, is computationally efficient and scalable for large cross-sectional datasets such as CRSP.\n- Optimization focuses on maximizing expected utility, and evaluation includes measures such as Sharpe ratio, CAPM alpha, and utility-based performance.\n- Results highlight that tilting value-weighted portfolios toward small-cap and high-momentum stocks improves performance, aligning with known anomalies in finance.\n\n## Exercises\n\n1. Define momentum as the rolling 12-month cumulative returns skipping the most recent month. Calculate the correlation with the measure based on market capitalization from above and compare summary statistics. How do the two measures differ?\n1. How do the estimated parameters $\\hat\\theta$ and the portfolio performance change if your objective is to maximize the Sharpe ratio instead of the hypothetical expected utility?\n1. The code above is very flexible in the sense that you can easily add new firm characteristics. Construct a new characteristic of your choice and evaluate the corresponding coefficient $\\hat\\theta_i$. \n1. Tweak the function `optimal_theta()` such that you can impose additional performance constraints in order to determine $\\hat\\theta$, which maximizes expected utility under the constraint that the market beta is below 1.\n1. Does the portfolio performance resemble a realistic out-of-sample backtesting procedure? Verify the robustness of the results by first estimating $\\hat\\theta$ based on *past data* only. Then, use more recent periods to evaluate the actual portfolio performance. \n1. By formulating the portfolio problem as a statistical estimation problem, you can easily obtain standard errors for the coefficients of the weight function. @Brandt2009 provide the relevant derivations in their paper in Equation (10). Implement a small function that computes standard errors for $\\hat\\theta$.\n",
    "supporting": [
      "parametric-portfolio-policies_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}