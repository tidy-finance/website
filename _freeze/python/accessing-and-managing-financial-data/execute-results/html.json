{
  "hash": "c15d66e6120c0c6961208abe5127a4c8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Accessing and Managing Financial Data\nmetadata:\n  pagetitle: Accessing and Managing Financial Data with Python\n  description-meta: Download and organize open-source financial data using the programming language Python. \n---\n\n\n\n::: callout-note\nYou are reading **Tidy Finance with Python**. You can find the equivalent chapter for the sibling **Tidy Finance with R** [here](../r/accessing-and-managing-financial-data.qmd).\n:::\n\nIn this chapter, we suggest a way to organize your financial data. Everybody who has experience with data is also familiar with storing data in various formats like CSV, XLS, XLSX, or other delimited value storage. Reading and saving data can become very cumbersome when using different data formats and across different projects. Moreover, storing data in delimited files often leads to problems with respect to column type consistency. For instance, date-type columns frequently lead to inconsistencies across different data formats and programming languages. \n\nThis chapter shows how to import different open-source datasets. Specifically, our data comes from the application programming interface (API) of Yahoo Finance, a downloaded standard CSV file, an XLSX file stored in a public Google Drive repository, and other macroeconomic time series.\\index{API} We store all the data in a *single* database, which serves as the only source of data in subsequent chapters. We conclude the chapter by providing some tips on managing databases.\\index{Database}\n\nFirst, we load the Python packages that we use throughout this chapter. Later on, we load more packages in the sections where we need them. \n\n::: {#385d5398 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport tidyfinance as tf\n```\n:::\n\n\nMoreover, we initially define the date range for which we fetch and store the financial data, making future data updates tractable. In case you need another time frame, you can adjust the dates below. Our data starts with 1960 since most asset pricing studies use data from 1962 on.\n\n::: {#59fee093 .cell execution_count=3}\n``` {.python .cell-code}\nstart_date = \"1960-01-01\"\nend_date = \"2023-12-31\"\n```\n:::\n\n\n## Fama-French Data\n\nWe start by downloading some famous Fama-French factors [e.g., @Fama1993] and portfolio returns commonly used in empirical asset pricing. Fortunately, the `pandas-datareader` package provides a simple interface to read data from Kenneth French's Data Library.\\index{Data!Fama-French factors}\\index{Kenneth French homepage}\n\n::: {#c1a1d29d .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas_datareader as pdr\n```\n:::\n\n\nWe can use the `pdr.DataReader()` function of the package to download monthly Fama-French factors. The set *Fama/French 3 Factors* contains the return time series of the market (`mkt_excess`), size (`smb`), and value (`hml`) factors alongside the risk-free rates (`rf`). Note that we have to do some manual work to parse all the columns correctly and scale them appropriately, as the raw Fama-French data comes in a unique data format. For precise descriptions of the variables, we suggest consulting Prof. Kenneth French's finance data library directly. If you are on the website, check the raw data files to appreciate the time you can save thanks to`pandas_datareader`.\\index{Factor!Market}\\index{Factor!Size}\\index{Factor!Value}\\index{Factor!Profitability}\\index{Factor!Investment}\\index{Risk-free rate}\n\n::: {#e37056bb .cell execution_count=5}\n``` {.python .cell-code}\nfactors_ff3_monthly_raw = pdr.DataReader(\n  name=\"F-F_Research_Data_Factors\",\n  data_source=\"famafrench\", \n  start=start_date, \n  end=end_date)[0]\n\nfactors_ff3_monthly = (factors_ff3_monthly_raw\n  .divide(100)\n  .reset_index(names=\"date\")\n  .assign(date=lambda x: pd.to_datetime(x[\"date\"].astype(str)))\n  .rename(str.lower, axis=\"columns\")\n  .rename(columns={\"mkt-rf\": \"mkt_excess\"})\n)\n```\n:::\n\n\nWe also download the set *5 Factors (2x3)*, which additionally includes the return time series of the profitability (`rmw`) and investment (`cma`) factors. We demonstrate how the monthly factors are constructed in [Replicating Fama and French Factors](replicating-fama-and-french-factors.qmd).\n\n::: {#82e96847 .cell execution_count=6}\n``` {.python .cell-code}\nfactors_ff5_monthly_raw = pdr.DataReader(\n  name=\"F-F_Research_Data_5_Factors_2x3\",\n  data_source=\"famafrench\", \n  start=start_date, \n  end=end_date)[0]\n\nfactors_ff5_monthly = (factors_ff5_monthly_raw\n  .divide(100)\n  .reset_index(names=\"date\")\n  .assign(date=lambda x: pd.to_datetime(x[\"date\"].astype(str)))\n  .rename(str.lower, axis=\"columns\")\n  .rename(columns={\"mkt-rf\": \"mkt_excess\"})\n)\n```\n:::\n\n\nIt is straightforward to download the corresponding *daily* Fama-French factors with the same function. \n\n::: {#2f8e1b6a .cell execution_count=7}\n``` {.python .cell-code}\nfactors_ff3_daily_raw = pdr.DataReader(\n  name=\"F-F_Research_Data_Factors_daily\",\n  data_source=\"famafrench\", \n  start=start_date, \n  end=end_date)[0]\n\nfactors_ff3_daily = (factors_ff3_daily_raw\n  .divide(100)\n  .reset_index(names=\"date\")\n  .rename(str.lower, axis=\"columns\")\n  .rename(columns={\"mkt-rf\": \"mkt_excess\"})\n)\n```\n:::\n\n\nIn a subsequent chapter, we also use the monthly returns from ten industry portfolios, so let us fetch that data, too.\\index{Data!Industry portfolios}\n\n::: {#1bb27a45 .cell execution_count=8}\n``` {.python .cell-code}\nindustries_ff_monthly_raw = pdr.DataReader(\n  name=\"10_Industry_Portfolios\",\n  data_source=\"famafrench\", \n  start=start_date, \n  end=end_date)[0]\n\nindustries_ff_monthly = (industries_ff_monthly_raw\n  .divide(100)\n  .reset_index(names=\"date\")\n  .assign(date=lambda x: pd.to_datetime(x[\"date\"].astype(str)))\n  .rename(str.lower, axis=\"columns\")\n)\n```\n:::\n\n\nIt is worth taking a look at all available portfolio return time series from Kenneth French's homepage. You should check out the other sets by calling `pdr.famafrench.get_available_datasets()`.\n\nTo automatically download and process Fama-French data, you can also use the `tidyfinance` package with `domain=\"factors_ff\"` and the corresponding dataset, e.g.:\n\n::: {#6291a20a .cell execution_count=9}\n``` {.python .cell-code}\ntf.download_data(\n  domain=\"factors_ff\",\n  dataset=\"F-F_Research_Data_Factors\", \n  start_date=start_date, \n  end_date=end_date\n)\n```\n:::\n\n\nThe `tidyfinance` package implements the processing steps as above and returns the same cleaned data frame. \n\n## q-Factors\n\nIn recent years, the academic discourse experienced the rise of alternative factor models, e.g., in the form of the @Hou2015 *q*-factor model. We refer to the [extended background](http://global-q.org/background.html) information provided by the original authors for further information. The *q*-factors can be downloaded directly from the authors' homepage from within `pd.read_csv()`. \\index{Data!q-factors}\\index{Factor!q-factors}\n\nWe also need to adjust this data. First, we discard information we will not use in the remainder of the book. Then, we rename the columns with the \"R_\"-prescript using regular expressions and write all column names in lowercase. We then query the data to select observations between the start and end dates. Finally, we use the double asterisk (`**`) notation in the `assign` function to apply the same transform of dividing by 100 to all four factors by iterating through them. You should always try sticking to a consistent style for naming objects, which we try to illustrate here - the emphasis is on *try*. You can check out style guides available online, e.g., [Hadley Wickham's `tidyverse` style guide.](https://style.tidyverse.org/index.html)\\index{Style guide} note that we temporarily adjust the SSL certificate handling behavior in Pythonâ€™s \n`ssl` module when retrieving the $q$-factors directly from the web, as demonstrated in [Working with Stock Returns](working-with-stock-returns.qmd). This method should be used with caution, which is why we restore the default settings immediately after successfully downloading the data.\n\n::: {#463d02d0 .cell execution_count=10}\n``` {.python .cell-code}\nimport ssl\nssl._create_default_https_context = ssl._create_unverified_context\n\nfactors_q_monthly_link = (\n  \"https://global-q.org/uploads/1/2/2/6/122679606/\"\n  \"q5_factors_monthly_2024.csv\"\n)\n\nfactors_q_monthly = (pd.read_csv(factors_q_monthly_link)\n  .assign(\n    date=lambda x: (\n      pd.to_datetime(x[\"year\"].astype(str) + \"-\" +\n        x[\"month\"].astype(str) + \"-01\"))\n  )\n  .drop(columns=[\"R_F\", \"R_MKT\", \"year\"])\n  .rename(columns=lambda x: x.replace(\"R_\", \"\").lower())\n  .query(f\"date >= '{start_date}' and date <= '{end_date}'\")\n  .assign(\n    **{col: lambda x: x[col]/100 for col in [\"me\", \"ia\", \"roe\", \"eg\"]}\n  )\n)\n\nssl._create_default_https_context = ssl.create_default_context\n```\n:::\n\n\nAgain, you can use the `tidyfinance` package for a shortcut:\n\n::: {#9bb26c54 .cell execution_count=11}\n``` {.python .cell-code}\ntf.download_data(\n  domain=\"factors_q\",\n  dataset=\"q5_factors_monthly\", \n  start_date=start_date, \n  end_date=end_date\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>risk_free</th>\n      <th>mkt_excess</th>\n      <th>me</th>\n      <th>ia</th>\n      <th>roe</th>\n      <th>eg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1967-01-01</td>\n      <td>0.003927</td>\n      <td>0.081852</td>\n      <td>0.068122</td>\n      <td>-0.029263</td>\n      <td>0.018813</td>\n      <td>-0.025511</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1967-02-01</td>\n      <td>0.003743</td>\n      <td>0.007557</td>\n      <td>0.016235</td>\n      <td>-0.002915</td>\n      <td>0.035399</td>\n      <td>0.021792</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1967-03-01</td>\n      <td>0.003693</td>\n      <td>0.040169</td>\n      <td>0.019836</td>\n      <td>-0.016772</td>\n      <td>0.018417</td>\n      <td>-0.011192</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1967-04-01</td>\n      <td>0.003344</td>\n      <td>0.038786</td>\n      <td>-0.006700</td>\n      <td>-0.028972</td>\n      <td>0.010253</td>\n      <td>-0.016371</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1967-05-01</td>\n      <td>0.003126</td>\n      <td>-0.042807</td>\n      <td>0.027457</td>\n      <td>0.021864</td>\n      <td>0.005901</td>\n      <td>0.001191</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>679</th>\n      <td>2023-08-01</td>\n      <td>0.004537</td>\n      <td>-0.023874</td>\n      <td>-0.024532</td>\n      <td>-0.012340</td>\n      <td>0.050483</td>\n      <td>0.051348</td>\n    </tr>\n    <tr>\n      <th>680</th>\n      <td>2023-09-01</td>\n      <td>0.004267</td>\n      <td>-0.052386</td>\n      <td>-0.001177</td>\n      <td>-0.004879</td>\n      <td>0.033773</td>\n      <td>0.027151</td>\n    </tr>\n    <tr>\n      <th>681</th>\n      <td>2023-10-01</td>\n      <td>0.004715</td>\n      <td>-0.031784</td>\n      <td>-0.026286</td>\n      <td>-0.004588</td>\n      <td>0.056473</td>\n      <td>0.046182</td>\n    </tr>\n    <tr>\n      <th>682</th>\n      <td>2023-11-01</td>\n      <td>0.004424</td>\n      <td>0.088639</td>\n      <td>-0.007638</td>\n      <td>-0.023272</td>\n      <td>-0.036413</td>\n      <td>-0.026912</td>\n    </tr>\n    <tr>\n      <th>683</th>\n      <td>2023-12-01</td>\n      <td>0.004266</td>\n      <td>0.048696</td>\n      <td>0.052012</td>\n      <td>0.002133</td>\n      <td>-0.041255</td>\n      <td>-0.040302</td>\n    </tr>\n  </tbody>\n</table>\n<p>684 rows Ã— 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Macroeconomic Predictors\n\nOur next data source is a set of macroeconomic variables often used as predictors for the equity premium. @Goyal2008 comprehensively reexamine the performance of variables suggested by the academic literature to be good predictors of the equity premium. The authors host the data on [Amit Goyal's website.](https://sites.google.com/view/agoyal145) Since the data is an XLSX-file stored on a public Google Drive location, we need additional packages to access the data directly from our Python session. Usually, you need to authenticate if you interact with Google drive directly in Python. Since the data is stored via a public link, we can proceed without any authentication.\\index{Google Drive}\n\n::: {#3b7eb7b3 .cell execution_count=12}\n``` {.python .cell-code}\nsheet_id = \"1bM7vCWd3WOt95Sf9qjLPZjoiafgF_8EG\"\nsheet_name = \"macro_predictors.xlsx\"\nmacro_predictors_link = (\n  f\"https://docs.google.com/spreadsheets/d/{sheet_id}\" \n  f\"/gviz/tq?tqx=out:csv&sheet={sheet_name}\"\n)\n```\n:::\n\n\nNext, we read in the new data and transform the columns into the variables that we later use:\n\n1. The dividend price ratio (`dp`), the difference between the log of dividends and the log of prices, where dividends are 12-month moving sums of dividends paid on the S&P 500 index, and prices are monthly averages of daily closing prices [@Campbell1988; @Campbell2006]. \n1. Dividend yield (`dy`), the difference between the log of dividends and the log of lagged prices [@Ball1978]. \n1. Earnings price ratio (`ep`), the difference between the log of earnings and the log of prices, where earnings are 12-month moving sums of earnings on the S&P 500 index [@Campbell1988]. \n1. Dividend payout ratio (`de`), the difference between the log of dividends and the log of earnings [@Lamont1998]. \n1. Stock variance (`svar`), the sum of squared daily returns on the S&P 500 index [@Guo2006].\n1. Book-to-market ratio (`bm`), the ratio of book value to market value for the Dow Jones Industrial Average [@Kothari1997].\n1. Net equity expansion (`ntis`), the ratio of 12-month moving sums of net issues by NYSE listed stocks divided by the total end-of-year market capitalization of NYSE stocks [@Campbell2008].\n1. Treasury bills (`tbl`), the 3-Month Treasury Bill: Secondary Market Rate from the economic research database at the Federal Reserve Bank at St. Louis [@Campbell1987].\n1. Long-term yield (`lty`), the long-term government bond yield from Ibbotson's Stocks, Bonds, Bills, and Inflation Yearbook [@Goyal2008].\n1. Long-term rate of returns (`ltr`), the long-term government bond returns from Ibbotson's Stocks, Bonds, Bills, and Inflation Yearbook [@Goyal2008].\n1. Term spread (`tms`), the difference between the long-term yield on government bonds and the Treasury bill [@Campbell1987].\n1. Default yield spread (`dfy`), the difference between BAA and AAA-rated corporate bond yields [@Fama1989]. \n1. Inflation (`infl`), the Consumer Price Index (All Urban Consumers) from the Bureau of Labor Statistics [@Campbell2004].\n\t\t\t\nFor variable definitions and the required data transformations, you can consult the material on [Amit Goyal's website.](https://sites.google.com/view/agoyal145)\n\n::: {#9ac9b21a .cell execution_count=13}\n``` {.python .cell-code}\nssl._create_default_https_context = ssl._create_unverified_context\n\nmacro_predictors = (\n  pd.read_csv(macro_predictors_link, thousands=\",\")\n  .assign(\n    date=lambda x: pd.to_datetime(x[\"yyyymm\"], format=\"%Y%m\"),\n    dp=lambda x: np.log(x[\"D12\"])-np.log(x[\"Index\"]),\n    dy=lambda x: np.log(x[\"D12\"])-np.log(x[\"Index\"].shift(1)),\n    ep=lambda x: np.log(x[\"E12\"])-np.log(x[\"Index\"]),\n    de=lambda x: np.log(x[\"D12\"])-np.log(x[\"E12\"]),\n    tms=lambda x: x[\"lty\"]-x[\"tbl\"],\n    dfy=lambda x: x[\"BAA\"]-x[\"AAA\"]\n  )\n  .rename(columns={\"b/m\": \"bm\"})\n  .get([\"date\", \"dp\", \"dy\", \"ep\", \"de\", \"svar\", \"bm\", \n        \"ntis\", \"tbl\", \"lty\", \"ltr\", \"tms\", \"dfy\", \"infl\"])\n  .query(\"date >= @start_date and date <= @end_date\")\n  .dropna()\n)\n\nssl._create_default_https_context = ssl.create_default_context\n```\n:::\n\n\nTo get the equivalent data through `tidyfinance`, you can call:\n\n::: {#40fdd2a6 .cell execution_count=14}\n``` {.python .cell-code}\ntf.download_data(\n  domain=\"macro_predictors\",\n  dataset=\"monthly\",\n  start_date=start_date, \n  end_date=end_date\n)\n```\n:::\n\n\n## Other Macroeconomic Data\n\nThe Federal Reserve bank of St. Louis provides the Federal Reserve Economic Data (FRED), an extensive database for macroeconomic data. In total, there are 817,000 US and international time series from 108 different sources. As an illustration, we use the already familiar `pandas-datareader` package to fetch consumer price index (CPI) data that can be found under the [CPIAUCNS](https://fred.stlouisfed.org/series/CPIAUCNS) key.\\index{Data!FRED}\\index{Data!CPI}\n\n::: {#bfe071e2 .cell execution_count=15}\n``` {.python .cell-code}\ncpi_monthly = (pdr.DataReader(\n    name=\"CPIAUCNS\", \n    data_source=\"fred\", \n    start=start_date, \n    end=end_date\n  )\n  .reset_index(names=\"date\")\n  .rename(columns={\"CPIAUCNS\": \"cpi\"})\n  .assign(cpi=lambda x: x[\"cpi\"] / x[\"cpi\"].iloc[-1])\n)\n```\n:::\n\n\nNote that we use the `assign()` in the last line to set the current (latest) price level as the reference inflation level. To download other time series, we just have to look it up on the FRED website and extract the corresponding key from the address. For instance, the producer price index for gold ores can be found under the [PCU2122212122210](https://fred.stlouisfed.org/series/PCU2122212122210) key.\n\nThe `tidyfinance` package can, of course, also fetch the same daily data and many more data series:\n\n::: {#ea425050 .cell execution_count=16}\n``` {.python .cell-code}\ntf.download_data(\n  domain=\"fred\",\n  series=\"CPIAUCNS\", \n  start_date=start_date, \n  end_date=end_date\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>series</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>564</th>\n      <td>1960-01-01</td>\n      <td>29.300</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>565</th>\n      <td>1960-02-01</td>\n      <td>29.400</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>566</th>\n      <td>1960-03-01</td>\n      <td>29.400</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>567</th>\n      <td>1960-04-01</td>\n      <td>29.500</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>568</th>\n      <td>1960-05-01</td>\n      <td>29.500</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1327</th>\n      <td>2023-08-01</td>\n      <td>307.026</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>1328</th>\n      <td>2023-09-01</td>\n      <td>307.789</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>1329</th>\n      <td>2023-10-01</td>\n      <td>307.671</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>1330</th>\n      <td>2023-11-01</td>\n      <td>307.051</td>\n      <td>CPIAUCNS</td>\n    </tr>\n    <tr>\n      <th>1331</th>\n      <td>2023-12-01</td>\n      <td>306.746</td>\n      <td>CPIAUCNS</td>\n    </tr>\n  </tbody>\n</table>\n<p>768 rows Ã— 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nTo download other time series, we just have to look it up on the FRED website and extract the corresponding key from the address. For instance, the producer price index for gold ores can be found under the [PCU2122212122210](https://fred.stlouisfed.org/series/PCU2122212122210) key. If your desired time series is not supported through tidyfinance, we recommend working with the `fredapi` package. Note that you need to get an API key to use its functionality. We refer to the package documentation for details.\n\n## Setting Up a Database\n\nNow that we have downloaded some (freely available) data from the web into the memory of our Python session, let us set up a database to store that information for future use. We will use the data stored in this database throughout the following chapters, but you could alternatively implement a different strategy and replace the respective code. \n\nThere are many ways to set up and organize a database, depending on the use case. For our purpose, the most efficient way is to use an [SQLite](https://SQLite.org/)-database, which is the C-language library that implements a small, fast, self-contained, high-reliability, full-featured SQL database engine. Note that [SQL](https://en.wikipedia.org/wiki/SQL) (Structured Query Language) is a standard language for accessing and manipulating databases.\\index{Database!SQLite}\n\n::: {#bb2bbbea .cell execution_count=17}\n``` {.python .cell-code}\nimport sqlite3\n```\n:::\n\n\nAn SQLite-database is easily created - the code below is really all there is. You do not need any external software. Otherwise, date columns are stored and retrieved as integers.\\index{Database!Creation} We will use the file `tidy_finance_r.sqlite`, located in the data subfolder, to retrieve data for all subsequent chapters. The initial part of the code ensures that the directory is created if it does not already exist.\n\n::: {#45194227 .cell execution_count=18}\n``` {.python .cell-code}\nimport os\n\nif not os.path.exists(\"data\"):\n  os.makedirs(\"data\")\n    \ntidy_finance = sqlite3.connect(database=\"data/tidy_finance_python.sqlite\")\n```\n:::\n\n\nNext, we create a remote table with the monthly Fama-French factor data. We do so with the `pandas` function `to_sql()`, which copies the data to our SQLite-database.\n\n::: {#8d9b3882 .cell execution_count=19}\n``` {.python .cell-code}\n(factors_ff3_monthly\n  .to_sql(name=\"factors_ff3_monthly\", \n          con=tidy_finance, \n          if_exists=\"replace\",\n          index=False)\n)\n```\n:::\n\n\nNow, if we want to have the whole table in memory, we need to call `pd.read_sql_query()` with the corresponding query. You will see that we regularly load the data into the memory in the next chapters.\\index{Database!Read}\n\n::: {#d0c8c3ed .cell execution_count=20}\n``` {.python .cell-code}\npd.read_sql_query(\n  sql=\"SELECT date, rf FROM factors_ff3_monthly\",\n  con=tidy_finance,\n  parse_dates={\"date\"}\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>rf</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1960-01-01</td>\n      <td>0.0033</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1960-02-01</td>\n      <td>0.0029</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1960-03-01</td>\n      <td>0.0035</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1960-04-01</td>\n      <td>0.0019</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1960-05-01</td>\n      <td>0.0027</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>763</th>\n      <td>2023-08-01</td>\n      <td>0.0045</td>\n    </tr>\n    <tr>\n      <th>764</th>\n      <td>2023-09-01</td>\n      <td>0.0043</td>\n    </tr>\n    <tr>\n      <th>765</th>\n      <td>2023-10-01</td>\n      <td>0.0047</td>\n    </tr>\n    <tr>\n      <th>766</th>\n      <td>2023-11-01</td>\n      <td>0.0044</td>\n    </tr>\n    <tr>\n      <th>767</th>\n      <td>2023-12-01</td>\n      <td>0.0043</td>\n    </tr>\n  </tbody>\n</table>\n<p>768 rows Ã— 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe last couple of code chunks are really all there is to organizing a simple database! You can also share the SQLite database across devices and programming languages. \n\nBefore we move on to the next data source, let us also store the other six tables in our new SQLite database. \n\n::: {#1c733fee .cell execution_count=21}\n``` {.python .cell-code}\ndata_dict = {\n  \"factors_ff5_monthly\": factors_ff5_monthly,\n  \"factors_ff3_daily\": factors_ff3_daily,\n  \"industries_ff_monthly\": industries_ff_monthly, \n  \"factors_q_monthly\": factors_q_monthly,\n  \"macro_predictors\": macro_predictors,\n  \"cpi_monthly\": cpi_monthly\n}\n\nfor key, value in data_dict.items():\n    value.to_sql(name=key,\n                 con=tidy_finance, \n                 if_exists=\"replace\",\n                 index=False)\n```\n:::\n\n\nFrom now on, all you need to do to access data that is stored in the database is to follow two steps: (i) Establish the connection to the SQLite-database and (ii) execute the query to fetch the data. For your convenience, the following steps show all you need in a compact fashion.\\index{Database!Connection}\n\n::: {#0a59cd4b .cell message='false' results='false' execution_count=22}\n``` {.python .cell-code}\nimport pandas as pd\nimport sqlite3\n\ntidy_finance = sqlite3.connect(database=\"data/tidy_finance_python.sqlite\")\n\nfactors_q_monthly = pd.read_sql_query(\n  sql=\"SELECT * FROM factors_q_monthly\",\n  con=tidy_finance,\n  parse_dates={\"date\"}\n)\n```\n:::\n\n\n## Managing SQLite Databases\n\nFinally, at the end of our data chapter, we revisit the  SQLite database itself. When you drop database objects such as tables or delete data from tables, the database file size remains unchanged because SQLite just marks the deleted objects as free and reserves their space for future uses. As a result, the database file always grows in size.\\index{Database!Management}\n\nTo optimize the database file, you can run the `VACUUM` command in the database, which rebuilds the database and frees up unused space. You can execute the command in the database using the `execute()` function. \n\n::: {#66645db6 .cell execution_count=23}\n``` {.python .cell-code}\ntidy_finance.execute(\"VACUUM\")\n```\n:::\n\n\nThe `VACUUM` command actually performs a couple of additional cleaning steps, which you can read about in [this tutorial.](https://SQLite.org/docs/sql/statements/vacuum.html) \\index{Database!Cleaning}\n\n## Key Takeaways\n\n- Importing Fama-French factors, q-factors, macroeconomic indicators, and CPI data is simplified through API calls, CSV parsing, and web scraping techniques.\n- The `tidyfinance` Python package offers pre-processed access to financial datasets, reducing manual data cleaning and saving valuable time.\n- Creating a centralized SQLite database helps manage and organize data efficiently across projects, while maintaining reproducibility.\n- Structured database storage supports scalable data access, which is essential for long-term academic projects and collaborative work in finance.\n\n## Exercises\n\n1. Download the monthly Fama-French factors manually from [Kenneth French's data library](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html) and read them in via `pd.read_csv()`. Validate that you get the same data as via the `pandas-datareader` package. \n1. Download the daily Fama-French 5 factors using the `pdr.DataReader()` package. After the successful download and conversion to the column format that we used above, compare the `rf`, `mkt_excess`, `smb`, and `hml` columns of `factors_ff3_daily` to `factors_ff5_daily`. Discuss any differences you might find. \n\n",
    "supporting": [
      "accessing-and-managing-financial-data_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}