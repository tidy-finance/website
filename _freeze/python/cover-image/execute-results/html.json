{
  "hash": "f66c9fbe9036da56190248165c912cf6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Cover Image\n---\n\n\n\nThe cover of the book is inspired by the fast growing generative art community in R.\\index{Generative art} Generative art refers to art that in whole or in part has been created with the use of an autonomous system. Instead of creating random dynamics, we rely on what is core to the book: The evolution of financial markets. Each circle corresponds to one of the twelve Fama-French industry portfolios, whereas each bar represents the average annual return between 1927 and 2022. The bar color is determined by the standard deviation of returns for each industry. The few lines of code below replicate the entire figure. \n\n::: {#17425ca0 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas_datareader as pdr\n\nfrom datetime import datetime\nfrom matplotlib.colors import LinearSegmentedColormap\n\nmain_colors = [\"#3B9AB2\", \"#78B7C5\", \"#EBCC2A\", \"#E1AF00\", \"#F21A00\"]\ncolormap = LinearSegmentedColormap.from_list(\"custom_colormap\", main_colors)\n\nindustries_ff_daily_raw = pdr.DataReader(\n  name=\"12_Industry_Portfolios_daily\",\n  data_source=\"famafrench\", \n  start=\"1927-01-01\", \n  end=\"2022-12-31\")[0]\n\nindustries_ff_daily = (industries_ff_daily_raw\n  .divide(100)\n  .reset_index(names=\"date\")\n  .assign(date=lambda x: pd.to_datetime(x[\"date\"].astype(str)))\n  .rename(str.lower, axis=\"columns\")\n)\n\nindustries_long = (industries_ff_daily\n  .melt(id_vars=\"date\", var_name=\"name\", value_name=\"value\")\n)\n                          \nindustries_order = sorted(industries_long[\"name\"].unique())\n\ndata_figure = (industries_long\n  .assign(year=industries_long[\"date\"].dt.to_period(\"Y\"))\n  .groupby([\"year\", \"name\"])\n  .aggregate(total=(\"value\", \"mean\"),\n             vola=(\"value\", \"std\"))\n  .reset_index()\n  .assign(\n    vola_ntile=lambda x: pd.qcut(x[\"vola\"], 42, labels=False)\n  )\n)\n\ndpi = 300\nwidth = 2400/dpi\nheight = 1800/dpi\nnum_cols = 4\nnum_rows = int(len(industries_order)/num_cols)\nfig, axs = plt.subplots(\n  num_rows, num_cols,\n  constrained_layout=True,\n  subplot_kw={\"projection\": \"polar\"},\n  figsize=(width, height),\n  dpi=dpi\n)\naxs = axs.flatten()\n\nfor i in enumerate(industries_order):\n\n    df = data_figure.copy().query(f'name == \"{i[1]}\"')\n    min_value = df[\"total\"].min()\n    max_value = df[\"total\"].max()\n    std_value = df[\"total\"].std()\n    df[\"total\"] = 2*(df[\"total\"]-min_value)/(max_value-min_value)-1\n\n    angles = np.linspace(0, 2*np.pi, len(df), endpoint=False)\n    values = df[\"total\"].values\n    width = 2*np.pi/len(values)\n    offset = np.pi/2\n\n    ax = axs[i[0]]\n    ax.set_theta_offset(offset)\n    ax.set_ylim(-std_value*1400, 1)\n    ax.set_frame_on(False)\n    ax.xaxis.grid(False)\n    ax.yaxis.grid(False)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n    color_values = df[\"vola_ntile\"].values\n    normalize = plt.Normalize(min(color_values), max(color_values))\n    colors = colormap(normalize(color_values))\n\n    ax.bar(\n      angles, values,\n      width=width, color=colors, edgecolor=\"white\", linewidth=0.2\n    )\n\nplt.tight_layout()\nplt.subplots_adjust(wspace=-0.2, hspace=-0.1)\nplt.gcf().savefig(\n  \"images/cover-image.png\", dpi = 300, pad_inches=0, transparent=False\n)\n```\n:::\n\n\n",
    "supporting": [
      "cover-image_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}