{
  "hash": "06f5e40992e9b4e33e6b2f56aae6a864",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Modern Portfolio Theory\nmetadata:\n  pagetitle: Modern Portfolio Theory with Python\n  description-meta: Learn how to use the programming language Python for implementing the Markowitz model for portfolio optimization.\n---\n\n\n\n::: {.callout-note}\nYou are reading **Tidy Finance with Python**. You can find the equivalent chapter for the sibling **Tidy Finance with R** [here](../r/modern-portfolio-theory.qmd).\n:::\n\nIn the previous chapter, we show how to download and analyze stock market data with figures and summary statistics. Now, we move to a typical question in finance: How should an investor allocate their wealth across assets that differ in expected returns, variance, and correlations to optimize their portfolioâ€™s performance?\\index{Portfolio choice} Modern Portfolio Theory (MPT), introduced by @Markowitz1952, revolutionized the way how we think about such investment decisions by formalizing the trade-off between risk and expected return. Markowitz's framework laid the foundation for much of modern finance, also earning him the Sveriges Riksbank Prize in Economic Sciences in 1990.\n\nMPT relies on the fact that portfolio risk depends on individual asset volatilities as well as on the correlations between asset returns. This insight highlights the power of diversification: Combining assets with low or negative correlations with a given portfolio reduces the overall portfolio risk. This principle is often illustrated with the analogy of a fruit basket: If all you have are apples and they spoil, you lose everything. With a variety of fruits, some fruits may spoil, but others will stay fresh.\n\nAt the heart of MPT is mean-variance analysis, which evaluates portfolios based on two dimensions: expected return and risk, defined as the variance of the portfolio returns. By balancing these two components, investors can construct portfolios that either maximize their expected return for a given level of risk or minimize their taken risk for a desired level of return. In this chapter, we first derive the optimal portfolio decisions and implement the mean-variance approach in R.\n\nWe use the following packages throughout this chapter: \n\n::: {#2b544d55 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport yfinance as yf\n\nfrom plotnine import *\nfrom mizani.formatters import percent_format\nfrom adjustText import adjust_text\n```\n:::\n\n\n\n\nWe introduce the `adjustText` package for adding text labels to the figures in this chapter [@adjustText].\n\n## The Asset Universe\n\nSuppose that $N$ different risky assets are available to the investor. Each asset $i$ delivers expected returns $\\mu_i$, representing the anticipated profit from holding the asset for one period. The investor can allocate their wealth across these assets by choosing the portfolio weights $\\omega_i$ for each asset $i$. We impose that the portfolio weights sum up to one to ensure that the investor is fully invested. There is no outside option, such as keeping your money under a mattress. The overarching question of this chapter is: How should the investor allocate their wealth across these assets to optimize their portfolio's performance?\n\nAccording to @Markowitz1952, portfolio selection involves two stages: First, forming expectations about future security performance based on observations and experience. Second, using these expectations to choose a portfolio. In practice, these two steps cannot be separated. You need historical data or other considerations to generate estimates of the distribution of future returns. Only then can one proceed proceed to optimal decision-making *conditional* on your estimation. \n\nTo keep things conceptually simple, we focus on the latter part for now and assume that the actual distribution of the asset returns is known. In later chapters, we discuss the issues that arise once we take estimation uncertainty into account. To provide some meaningful illustrations, we rely on historical data to compute reasonable proxies for the expected returns and the variance-covariance of the assets returns, but we will work under the assumption that these are the true parameters of the return distribution.  \n\nThus, leveraging the approach introduced in [Working with Stock Returns](working-with-stock-returns.qmd), we download the constituents of the Dow Jones Industrial Average as an example portfolio as well as their daily adjusted close prices. \n\n::: {#a77c9754 .cell execution_count=4}\n``` {.python .cell-code}\nimport ssl\nssl._create_default_https_context = ssl._create_unverified_context\n\nurl = (\"https://www.ssga.com/us/en/institutional/etfs/library-content/\"\n       \"products/fund-data/etfs/us/holdings-daily-us-en-dia.xlsx\")\n\nsymbols = (pd.read_excel(url, skiprows=4, nrows=30)\n  .get(\"Ticker\")\n  .tolist()\n)\n\nssl._create_default_https_context = ssl.create_default_context\n\nprices_daily = (yf.download(\n    tickers=symbols, \n    start=\"2000-01-01\", \n    end=\"2023-12-31\", \n    progress=False,\n    auto_adjust=False,\n    multi_level_index=False\n  ))\n\nprices_daily = (prices_daily\n  .stack()\n  .reset_index(level=1, drop=False)\n  .reset_index()\n  .rename(columns={\"Ticker\": \"symbol\", \"Date\": \"date\", \"Adj Close\": \"adjusted\"})\n)\n```\n:::\n\n\nTo have a stable stock universe and to keep the analysis simple, we ensure that all stocks were traded over the whole sample period:\n\n::: {#37b189f3 .cell execution_count=5}\n``` {.python .cell-code}\nprices_daily = (prices_daily\n  .groupby(\"symbol\")\n  .apply(lambda x: x.assign(counts=x[\"adjusted\"].dropna().count()))\n  .reset_index(drop=True)\n  .query(\"counts == counts.max()\")\n)\n```\n:::\n\n\nWe compute the sample average returns as $\\mu_i = \\frac{1}{T} \\sum_{t=1}^{T} r_{i,t},$ where $r_{i,t}$ is the return of asset $i$ in period $t$, and $T$ is the total number of periods. As noted above, we treat the vector $\\mu = (\\mu_1, ...,\\mu_N)^\\prime$ as the true expected return of the assets. For simplicity and easier interpretation, we focus on monthly returns going forward.\n\n::: {#79d8e8de .cell execution_count=6}\n``` {.python .cell-code}\nreturns_monthly = (prices_daily\n  .assign(\n    date=prices_daily[\"date\"].dt.to_period(\"M\").dt.to_timestamp()\n  )\n  .groupby([\"symbol\", \"date\"], as_index=False)\n  .agg(adjusted=(\"adjusted\", \"last\"))\n  .assign(\n    ret=lambda x: x.groupby(\"symbol\")[\"adjusted\"].pct_change()\n  )\n)\n```\n:::\n\n\nIndividual asset risk in MPT is typically quantified using variance (i.e., $\\sigma^2_i$) or volatilities (i.e., $\\sigma_i$).^[Alternative approaches include value-at-risk, expected shortfall, or higher-order moments such as skewness and kurtosis.] We suppose that the true volatilities of the assets are given by the sample standard deviation $\\sigma_i = \\sqrt{\\frac{1}{T-1} \\sum_{t=1}^{T} (r_{i,t} - \\mu_i)^2}.$\\index{Variance}\\index{Volatility}\\index{Sample standard deviation}\n\nWe compute the sample standard deviation for each asset by using the `std()` function.\n\n::: {#781b1555 .cell execution_count=7}\n``` {.python .cell-code}\nassets = (returns_monthly\n  .groupby(\"symbol\", as_index=False)\n  .agg(\n    mu=(\"ret\", \"mean\"),\n    sigma=(\"ret\", \"std\")\n  )\n)\n```\n:::\n\n\nWe can illustrate the resulting distribution of the asset returns in @fig-201, showing the volatility on the horizontal axis and the expected return on the vertical axis.\n\n::: {#cell-fig-201 .cell execution_count=8}\n``` {.python .cell-code}\n(\n  ggplot(assets, aes(x=\"sigma\", y=\"mu\", label=\"symbol\"))\n  + geom_point()\n  + geom_text(adjust_text={\"arrowprops\": {\"arrowstyle\": \"-\"}})\n  + scale_x_continuous(labels=percent_format())\n  + scale_y_continuous(labels=percent_format())\n  + labs(\n      x=\"Volatility\", y=\"Expected return\",\n      title=\"Expected returns and volatilities of Dow Jones index constituents\"\n  )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![Expected returns and volatilities based on monthly returns adjusted for dividend payments and stock splits.](modern-portfolio-theory_files/figure-html/fig-201-output-1.png){#fig-201 width=2100 height=1500 fig-alt='Title: Expected returns and volatilities of Dow Jones index constituents. The figure is a scatter plot with volatilities on the horizontal and expected returns on the vertical axis.'}\n:::\n:::\n\n\nAs highlighted above, a key innovation of MPT is to consider interactions between assets. The *variance-covariance matrix* collects this information. We assume that the variance-covariance matrix $\\Sigma$ of the returns is given by the sample covariance: \\index{Covariance}\n\n$$\\sigma_{i,j} = \\frac{1}{T-1} \\sum_{t=1}^{T} (r_{i,t} - \\mu_i)(r_{j,t} - \\mu_j)$$\n\nThe interpretation is straightforward: While a positive covariance between assets indicates that these assets tend to move in the same direction, a negative covariance indicates that the assets move in opposite directions. \n\nWe can use the `cov()` function that takes a matrix of returns as inputs. We thus need to transform the returns from a data frame into a $(T \\times N)$ matrix with one column for each of the $N$ symbols and one row for each of the $T$ trading days. We achieve this by using `pivot_wider()` with the new column names from the `symbol`-column and setting the values to `ret`.\n\n::: {#fbd70715 .cell execution_count=9}\n``` {.python .cell-code}\nreturns_wide = (returns_monthly\n  .pivot(index=\"date\", columns=\"symbol\", values=\"ret\")\n  .reset_index()\n)\n\nsigma = (returns_wide\n  .drop(columns=[\"date\"])\n  .cov()\n)\n```\n:::\n\n\nFigure @fig-203 illustrates the resulting variance-covariance matrix. \n\n::: {#cell-fig-203 .cell execution_count=10}\n``` {.python .cell-code}\nsigma_long = (sigma\n  .reset_index()\n  .melt(id_vars=\"symbol\", var_name=\"symbol_b\", value_name=\"value\")\n)\n\nsigma_long[\"symbol_b\"] = pd.Categorical(\n  sigma_long[\"symbol_b\"], \n  categories=sigma_long[\"symbol_b\"].unique()[::-1],\n  ordered=True\n)\n\n(\n  ggplot(sigma_long, aes(x=\"symbol\", y=\"symbol_b\", fill=\"value\"))\n  + geom_tile()\n  + labs(\n      x=\"\", y=\"\", fill=\"(Co-)Variance\",\n      title=\"Variance-covariance matrix of Dow Jones index constituents\"\n    )\n  + scale_fill_continuous(labels=percent_format())\n  + theme(axis_text_x=element_text(angle=45, hjust=1))\n)\n```\n\n::: {.cell-output .cell-output-display}\n![Variances and covariances based on monthly returns adjusted for dividend payments and stock splits.](modern-portfolio-theory_files/figure-html/fig-203-output-1.png){#fig-203 width=2100 height=1500 fig-alt='Title: Variance-covariance matrix of Dow Jones index constituents. The figure shows 900 tiles with variances and covariances between each constituent-pair.'}\n:::\n:::\n\n\n## The Minimum-Variance Framework\n\nSuppose now the investor allocates their wealth in a portfolio given by the weight vector $\\omega$. The resulting portfolio returns $\\omega^\\prime r$ have an expected return $\\mu_\\omega = \\omega^{\\prime}\\mu = \\sum_{i=1}^N \\omega_i \\mu_i$. The variance of the portfolio returns is $\\sigma^2_\\omega = \\omega^{\\prime}\\Sigma\\omega = \\sum_{i=1}^{N} \\sum_{j=1}^{N} \\omega_i \\omega_j \\sigma_{ij}$ where $\\omega_i$ and  $\\omega_j$ are the weights of assets $i$ and $j$ in the portfolio, respectively, and $\\sigma_{ij}$ is the covariance between returns of assets $i$ and $j$.\n\nWe first consider an investor who wants to invest in a portfolio that delivers the lowest possible variance as a reference point. Thus, the optimization problem of the minimum-variance investor is given by\n\n$$\\min_{\\omega_1, ... \\omega_n} \\sum_{i=1}^{n} \\sum_{j=1}^{n} \\omega_i \\omega_j \\sigma_{ij} = \\min_\\omega \\omega^{\\prime}\\Sigma\\omega.$$\n\nWhile staying fully invested across all available assets $N$, $\\sum_{i=1}^{N} \\omega_i = 1$. The analytical solution for the minimum-variance portfolio is\n\n$$\\omega_\\text{mvp} = \\frac{\\Sigma^{-1}\\iota}{\\iota^{\\prime}\\Sigma^{-1}\\iota},$$\n\nwhere $\\iota$ is a vector of 1's and $\\Sigma^{-1}$ is the inverse of the variance-covariance matrix $\\Sigma$. See [Proofs](proofs.qmd) in the Appendix for details on the derivation. In the following code chunk, we calculate the weights of the minimum-variance portfolio:\n\n::: {#a7b28dfe .cell execution_count=11}\n``` {.python .cell-code}\niota = np.ones(sigma.shape[0])\nsigma_inv = np.linalg.inv(sigma.values)\nomega_mvp = (sigma_inv @ iota) / (iota @ sigma_inv @ iota)\n```\n:::\n\n\nFigure @fig-204 shows the resulting portfolio weights. \n\n::: {#cell-fig-204 .cell execution_count=12}\n``` {.python .cell-code}\nassets = assets.assign(omega_mvp=omega_mvp)\n\nassets[\"symbol\"] = pd.Categorical(\n  assets[\"symbol\"],\n  categories=assets.sort_values(\"omega_mvp\")[\"symbol\"],\n  ordered=True\n)\n\n(\n  ggplot(assets,\n         aes(y=\"omega_mvp\", x=\"symbol\", fill=\"omega_mvp>0\"))\n  + geom_col()\n  + coord_flip()\n  + scale_y_continuous(labels=percent_format())\n  + labs(x=\"\", y=\"\",\n       title=\"Minimum-variance portfolio weights\")\n  + theme(legend_position=\"none\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![Weights are based on historical moments of monthly returns adjusted for dividend payments and stock splits.](modern-portfolio-theory_files/figure-html/fig-204-output-1.png){#fig-204 width=2100 height=1500 fig-alt='Title: Minimum-variance portfolio weights. The figure shows a bar chart with portfolio weights for each DOW Jones index constituent.'}\n:::\n:::\n\n\nBefore we move on to other portfolios, we collect the return and volatility of the minimum-variance portfolio in a data frame:\n\n::: {#35406e5e .cell execution_count=13}\n``` {.python .cell-code}\nmu = assets[\"mu\"].values\nmu_mvp = omega_mvp @ mu\nsigma_mvp = np.sqrt(omega_mvp @ sigma.values @ omega_mvp)\nsummary_mvp = pd.DataFrame({\n  \"mu\": [mu_mvp],\n  \"sigma\": [sigma_mvp],\n  \"type\": [\"Minimum-Variance Portfolio\"]\n})\nsummary_mvp\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mu</th>\n      <th>sigma</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.008356</td>\n      <td>0.032144</td>\n      <td>Minimum-Variance Portfolio</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Efficient Portfolios\n\nIn many instances, earning the lowest possible variance may not be the desired outcome. Instead, we generalize the concept of efficient portfolios, where, in addition to minimizing portfolio variance, the investor aims to earn a **minimum expected return** $\\omega^{\\prime}\\mu \\geq \\bar{\\mu}.$ In other words, when $\\bar\\mu\\geq \\omega_\\text{mvp}^{\\prime}\\mu$, the investor is willing to accept a higher portfolio variance in return for earning a higher expected return. \n\nSuppose, for instance, the investor wants to earn at least the historical average return of the asset that delivered the highest average returns in the past:\n\n::: {#10c1720e .cell execution_count=14}\n``` {.python .cell-code}\nmu_bar = assets[\"mu\"].max()\n```\n:::\n\n\nFormally, the optimization problem is given by \n\n$$\\min_\\omega \\omega^{\\prime}\\Sigma\\omega \\text{ s.t. } \\omega^{\\prime}\\iota = 1 \\text{ and } \\omega^{\\prime}\\mu\\geq\\bar\\mu.$$\n\nThe analytic solution for the efficient portfolio can be derived as:\n\n$$\\omega_{efp} = \\frac{\\lambda^*}{2}\\left(\\Sigma^{-1}\\mu -\\frac{D}{C}\\Sigma^{-1}\\iota \\right),$$ \n\nwhere $\\lambda^* = 2\\frac{\\bar\\mu - D/C}{E-D^2/C}$, $C = \\iota'\\Sigma^{-1}\\iota$, $D=\\iota'\\Sigma^{-1}\\mu$, and $E=\\mu'\\Sigma^{-1}\\mu$. For details, we again refer to the [Proofs](proofs.qmd) in the Appendix.\n\nThe code below implements the analytic solution to this optimization problem and collects the resulting portfolio return and risk in a data frame.\n\n::: {#da5894c5 .cell execution_count=15}\n``` {.python .cell-code}\nC = iota @ sigma_inv @ iota\nD = iota @ sigma_inv @ mu\nE = mu @ sigma_inv @ mu\nlambda_tilde = 2 * (mu_bar - D / C) / (E - (D ** 2) / C)\nomega_efp = omega_mvp + (lambda_tilde / 2) * (sigma_inv @ mu - D * omega_mvp)\nmu_efp = omega_efp @ mu\nsigma_efp = np.sqrt(omega_efp @ sigma.values @ omega_efp)\n\nsummary_efp = pd.DataFrame({\n  \"mu\": [mu_efp],\n  \"sigma\": [sigma_efp],\n  \"type\": [\"Efficient Portfolio\"]\n})\n```\n:::\n\n\nFigure @fig-205 shows the average return and volatility of the minimum-variance and the efficient portfolio relative to the index constituents. As expected, the efficient portfolio has a higher expected return at the cost of higher volatility compared to the minimum-variance portfolio. \n\n::: {#cell-fig-205 .cell execution_count=16}\n``` {.python .cell-code}\nsummaries = pd.concat(\n  [assets, summary_mvp, summary_efp], ignore_index=True\n)\n\n(\n  ggplot(summaries, \n         aes(x=\"sigma\", y=\"mu\"))\n  + geom_point(\n      data=summaries.query(\"type.isna()\")\n    )\n  + geom_point(\n      data=summaries.query(\"type.notna()\"), color=\"#F21A00\", size=3\n    )\n  + geom_label(aes(label=\"type\"), adjust_text={\"arrowprops\": {\"arrowstyle\": \"-\"}})\n  + scale_x_continuous(labels=percent_format())\n  + scale_y_continuous(labels=percent_format())\n  + labs(\n      x=\"Volatility\", y=\"Expected return\",\n      title=\"Efficient & minimum-variance portfolios\"\n    ) \n)\n```\n\n::: {.cell-output .cell-output-display}\n![The big dots indicate the location of the minimum-variance and the efficient portfolio that delivers the expected return of the stock with the higehst return, respectively. The small dots indicate the location of the individual constituents.](modern-portfolio-theory_files/figure-html/fig-205-output-1.png){#fig-205 width=2100 height=1500 fig-alt='Title: Efficient & minimum-variance portfolios. The figure shows big dots indicating the location of the minimum-variance and the efficient portfolio that delivers the expected return of the stock with the higehst return, respectively. The small dots indicate the location of the individual constituents.'}\n:::\n:::\n\n\nThe figure illustrates the substantial diversification benefits: Instead of allocating all wealth into one asset that delivered a high average return in the past (at a substantial volatility), the efficient portfolio promises exactly the same expected returns but at a much lower volatility. \n\nIt should be noted that the level of desired returns $\\bar\\mu$ reflects the risk-aversion of the investor. Less risk-averse investors may require a higher level of desired returns. In contrast, more risk-averse investors may only choose $\\bar\\mu$ closer to the expected return of the minimum-variance portfolio. Very often, the mean-variance framework is instead derived as the optimal decision framework of an investor with a mean-variance utility function with a coefficient of relative risk aversion $\\gamma$. In the [Proofs](proofs.qmd) in the Appendix, we show that there is a one-to-one mapping from $\\gamma$ to the desired level of expected returns $\\bar\\mu$, which implies that the resulting efficient portfolios are equivalent and do not depend on the way the optimization problem is formulated.\n\n## The Efficient Frontier\n\n\\index{Efficient frontier} The set of portfolios that satisfies the condition that no other portfolio exists with a higher expected return for a given level of volatility is called the *efficient frontier*, see, e.g., @Merton1972.\\index{Return volatility} \\index{Separation theorem}. To derive the portfolios that span the efficient frontier, the [mutual fund separation theorem](https://en.wikipedia.org/wiki/Mutual_fund_separation_theorem) proves very helpful. In short, the theorem states that as soon as we have two efficient portfolios (such as the minimum-variance portfolio $\\omega_\\text{mvp}$ and the efficient portfolio for a higher required level of expected returns $\\omega_\\bar\\mu$, we can characterize the entire efficient frontier by combining these two portfolios. That is, any linear combination of the two portfolio weights will again represent an efficient portfolio. \\index{Efficient frontier} In other words, the efficient frontier can be characterized by the following equation:\n\n$$\\omega_{a\\mu_1 + (1-a)\\mu_2} = a \\cdot \\omega_{\\mu_1} + (1-a) \\cdot\\omega_{\\mu_2},$$\n\nwhere $a$ is a scalar between 0 and 1, $\\omega_{\\mu_i}$ is an efficient portfolio that delivers the expected return $\\mu_i$. It is straightforward to prove the theorem. Consider the analytical solution for the efficient portfolio, which delivers expected returns $\\mu_i$, implying: \n\n$$a \\cdot \\omega_{\\mu_1} + (1-a) \\cdot\\omega_{\\mu_2} = \\left(\\frac{a\\mu_1 + (1-a)\\mu_2- D/C }{E-D^2/C}\\right)\\left(\\Sigma^{-1}\\mu -\\frac{D}{C}\\Sigma^{-1}\\iota \\right),$$ \n\nwhich corresponds to the efficient portfolio earning $a\\mu_1 + (1-a)\\mu_2$ in expectation.\n\nThe code below implements the construction of this efficient frontier, which characterizes the highest expected return achievable at each level of risk.\n\n::: {#527346a7 .cell execution_count=17}\n``` {.python .cell-code}\nefficient_frontier = (\n  pd.DataFrame({\n    \"a\": np.arange(-1, 2.01, 0.01)\n  })\n  .assign(\n    omega=lambda x: x[\"a\"].map(lambda x: x * omega_efp + (1 - x) * omega_mvp)\n  )\n  .assign(\n    mu=lambda x: x[\"omega\"].map(lambda x: x @ mu),\n    sigma=lambda x: x[\"omega\"].map(lambda x: np.sqrt(x @ sigma @ x))\n  )\n)\n```\n:::\n\n\nFinally, it is simple to visualize the efficient frontier alongside the two efficient portfolios in a figure using `ggplot` (see @fig-206). We also add the individual stocks in the same plot.\\index{Graph!Efficient frontier}\n\n::: {#cell-fig-206 .cell execution_count=18}\n``` {.python .cell-code}\nsummaries = pd.concat(\n  [summaries, efficient_frontier], ignore_index=True\n)\n\n(\n  ggplot(summaries, \n         aes(x=\"sigma\", y=\"mu\"))\n  + geom_point(\n      data = summaries.query(\"type.isna()\")\n    )\n  + geom_point(\n      data = summaries.query(\"type.notna()\"), color=\"#F21A00\", size=3\n    )\n  + geom_label(aes(label=\"type\"), adjust_text={\"arrowprops\": {\"arrowstyle\": \"-\"}})\n  + scale_x_continuous(labels=percent_format())\n  + scale_y_continuous(labels=percent_format())\n  + labs(\n      x=\"Volatility\", y=\"Expected return\",\n      title=\"Efficient & minimum-variance portfolios\"\n    ) \n)\n```\n\n::: {.cell-output .cell-output-display}\n![The big dots indicate the location of the minimum-variance and the efficient portfolio that delivers three times the expected return of the minimum-variance portfolio, respectively. The small dots indicate the location of the individual constituents.](modern-portfolio-theory_files/figure-html/fig-206-output-1.png){#fig-206 width=2100 height=1500 fig-alt='Title: Efficient frontier constructed from historical data for Dow Jones index constituents. The figure shows Dow index constituents in a mean-variance diagram. A hyperbola indicates the efficient frontier of portfolios that dominate the individual holdings in the sense that they deliver higher expected returns for the same level of volatility.'}\n:::\n:::\n\n\n## Key Takeaways\n\nThe mean-variance framework is a cornerstone of modern finance, emphasizing the trade-off between risk and return. The key insights from this chapter are:\n\n- Mean-variance optimization balances expected returns against expected portfolio risk.\n- Portfolio risk depends on both volatilities and correlations between assets.\n- The minimum-variance portfolio achieves the lowest possible risk for a given set of assets.\n- Efficient portfolios maximize expected return for each level of risk.\n\n## Exercises\n\n1. We restricted our sample to all assets trading every day since 2000-01-01. Discuss why this restriction might introduce survivorship bias and how it could affect inferences about future expected portfolio performance.\n1. The efficient frontier characterizes portfolios with the highest expected return for different levels of risk. Identify the portfolio with the highest expected return per unit of standard deviation (risk). Which famous performance measure corresponds to the ratio of average returns to standard deviation?\n1. Analyze how varying the correlation coefficients between asset returns influences the shape of the efficient frontier. Use hypothetical data for a small number of assets to visualize and interpret these changes.\n\n",
    "supporting": [
      "modern-portfolio-theory_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}